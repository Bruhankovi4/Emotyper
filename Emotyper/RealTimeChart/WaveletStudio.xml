<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WaveletStudio</name>
    </assembly>
    <members>
        <member name="T:WaveletStudio.Blocks.BlockInOutSignalBridgeBase`1">
            <summary>
            A shortcut to get a signal of a node (input or output of a signal)
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.IBlockInOutSignal">
            <summary>
            Represents a shortcut to the signal stored in the Input or Output node
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.IBlockInOutSignal.Item(System.Int32)">
            <summary>
            Returns the first signal of the node with the index specified
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.IBlockInOutSignal.Item(System.Int32,System.Int32)">
            <summary>
            Returns the signal of the node with the index specified
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.IBlockInOutSignal.Item(System.String)">
            <summary>
            Returns the first signal of the node with the name specified
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.IBlockInOutSignal.Item(System.String,System.Int32)">
            <summary>
            Returns the signal of the node with the name specified
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockInOutSignalBridgeBase`1.AllSignals(System.Int32)">
            <summary>
            Get all signals of output
            </summary>
            <param name="nodeIndex">The zero-based index of the input/output</param>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockInOutSignalBridgeBase`1.AllSignals(System.String)">
            <summary>
            Get all signals of output
            </summary>
            <param name="nodeName">The short name of the input/output</param>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockInOutSignalBridgeBase`1.GetNodeList(WaveletStudio.Blocks.BlockBase)">
            <summary>
            Return the node list
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockInOutSignalBridgeBase`1.#ctor(WaveletStudio.Blocks.BlockBase)">
            <summary>
            Constructor
            </summary>        
        </member>
        <member name="P:WaveletStudio.Blocks.BlockInOutSignalBridgeBase`1.Item(System.Int32)">
            <summary>
            Returns the first signal of the specified input/output
            </summary>
            <param name="nodeIndex">The zero-based index of the input/output</param>
        </member>
        <member name="P:WaveletStudio.Blocks.BlockInOutSignalBridgeBase`1.Item(System.String)">
            <summary>
            Returns the first signal of the specified input/output
            </summary>
            <param name="nodeName">The short name of the input/output</param>
        </member>
        <member name="P:WaveletStudio.Blocks.BlockInOutSignalBridgeBase`1.Item(System.Int32,System.Int32)">
            <summary>
            Returns a signal of the specified input/output
            </summary>
            <param name="nodeIndex">The zero-based index of the input/output</param>
            <param name="signalIndex">The zero-based index of the desired signal</param>
        </member>
        <member name="P:WaveletStudio.Blocks.BlockInOutSignalBridgeBase`1.Item(System.String,System.Int32)">
            <summary>
            Returns the first signal of the specified input/output
            </summary>
            <param name="nodeName">The short name of the input/output</param>
            <param name="signalIndex">The zero-based index of the desired signal</param>
        </member>
        <member name="T:WaveletStudio.Blocks.BlockInputSignalBridge">
            <summary>
            A shortcut to get a signal of the input
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockInputSignalBridge.#ctor(WaveletStudio.Blocks.BlockBase)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.BlockNodeBase">
            <summary>
            Base of the nodes
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockNodeBase.SignalList">
            <summary>
            Returns the signals of the node
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockNodeBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockNodeBase.#ctor(WaveletStudio.Blocks.BlockBase@,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="root">The block object thar contains this node</param>
            <param name="name">Name</param>
            <param name="shortName">Short name</param>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockNodeBase.ConnectTo(WaveletStudio.Blocks.BlockNodeBase@)">
            <summary>
            Connect this input node to another node in other block
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:WaveletStudio.Blocks.BlockNodeBase.Root">
            <summary>
            The block that contains this node
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.BlockNodeBase.Name">
            <summary>
            Name of the node
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.BlockNodeBase.ShortName">
            <summary>
            Short name
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.BlockNodeBase.ConnectingNode">
            <summary>
            The another node connected to this
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.BlockOutputNode">
            <summary>
            Output node of an block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockOutputNode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockOutputNode.#ctor(WaveletStudio.Blocks.BlockBase@,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="root">The block object thar contains this node</param>
            <param name="name">Name of the output</param>
            <param name="shortName">Short name</param>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockOutputNode.ConnectTo(WaveletStudio.Blocks.BlockInputNode)">
            <summary>
            Connect this output node to an input node in other block
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockOutputNode.ConnectTo(WaveletStudio.Blocks.BlockInputNode@)">
            <summary>
            Connect this output node to an input node in other block
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockOutputNode.Clone">
            <summary>
            Clones this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockOutputNode.CreateSingleOutput(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Create a single output node in a block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockOutputNode.CreateSingleOutputSignal(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Create a single output node in a block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.BlockOutputNode.Object">
            <summary>
            Object generated by the block
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.BlockOutputSignalBridge">
            <summary>
            A shortcut to get a signal of the input
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockOutputSignalBridge.#ctor(WaveletStudio.Blocks.BlockBase)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.ConvolutionBlock">
             <summary>
             <para>The Convolution block convolves the signal of the first input with the signal of second input (filter).</para>
             <para>Both the signal and filter can be lists. Each signal in the first list will be convolved with the correspondent filter in the second. If the number of filters in the filter list is lesser than the number of filters, the first filter will be used.</para>
             <para>Inputs: This block has two inputs: the signal list and the filter list.</para>
             <para>Outputs: This block has only one output: the result of convolution between the inputs.</para>
             <para>Image: http://i.imgur.com/kUEo44z.png </para>
             <para>InOutGraph: http://i.imgur.com/rvyncoK.png </para>
             <para>Title: Convolution</para>
             <example>
                 <code>
                     var signal = new ImportFromTextBlock { Text = "0, 0, 1, 1, 1, 1, 0, 0" };
                     var filter = new ImportFromTextBlock { Text = "0, 0, 1, 0.75, 0.5, 0.25, 0, 0" };
                     var block = new ConvolutionBlock
                     {
                         FFTMode = ManagedFFTModeEnum.UseLookupTable,
                         ReturnOnlyValid = false
                     };
            
                     signal.OutputNodes[0].ConnectTo(block.InputNodes[0]);
                     filter.OutputNodes[0].ConnectTo(block.InputNodes[1]);
                     
                     var blockList = new BlockList { signal, filter, block };
                     blockList.ExecuteAll();
                     Console.WriteLine(block.Output[0].ToString(1));
                     
                     //Console Output:
                     //0.0 0.0 0.0 0.0 1.0 1.8 2.3 2.5 1.5 0.8 0.3 0.0 0.0 0.0 0.0
                 </code>
             </example>
             </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.BlockBase">
            <summary>
            Defines a processing block
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.CustomAttributes.GlobalizedObject">
            <summary>
            Instantiates a property descriptor of type GlobalizedPropertyDescriptor.  
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.GlobalizedObject.GetClassName">
            <summary>
            Returns the name of the class
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.GlobalizedObject.GetAttributes">
            <summary>
            Returns a collection of attributes of this class
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.GlobalizedObject.GetComponentName">
            <summary>
            Returns the component name of this class
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.GlobalizedObject.GetConverter">
            <summary>
            Returns a type converter for the class
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.GlobalizedObject.GetDefaultEvent">
            <summary>
            Returns the default event for a component with a custom type descriptor.
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.GlobalizedObject.GetDefaultProperty">
            <summary>
            Returns the default property for the specified component with a custom type descriptor.
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.GlobalizedObject.GetEditor(System.Type)">
            <summary>
            Returns an editor with the specified base type and with a custom type descriptor for the specified component.
            </summary>
            <param name="editorBaseType"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.GlobalizedObject.GetEvents(System.Attribute[])">
            <summary>
            Returns the collection of events for a specified component using a specified array of attributes as a filter and using a custom type descriptor.
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.GlobalizedObject.GetEvents">
            <summary>
            Returns the collection of events for a specified component with a custom type descriptor.
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.GlobalizedObject.GetProperties(System.Attribute[])">
            <summary>
            Returns the properties of a type.
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.GlobalizedObject.GetProperties">
            <summary>
            Returns the properties of a type.
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.GlobalizedObject.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Return the owner (this)
            </summary>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.CustomAttributes.GlobalizedObject.CausesRefresh">
            <summary>
            Returns the properties of a type.
            </summary>
        </member>
        <member name="F:WaveletStudio.Blocks.BlockBase.InputNodes">
            <summary>
            Inputs
            </summary>
        </member>
        <member name="F:WaveletStudio.Blocks.BlockBase.OutputNodes">
            <summary>
            Outputs
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockBase.Execute">
            <summary>
            Execute the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockBase.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockBase.Clone">
            <summary>
            Clone this block to a new one
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockBase.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockBase.MemberwiseClone">
            <summary>
            Clones this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockBase.MemberwiseCloneWithLinks">
            <summary>
            Clones this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockBase.ConnectTo(WaveletStudio.Blocks.BlockBase)">
            <summary>
            Connects to another block
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockBase.GetName(System.Type)">
            <summary>
            Gets the name of a block
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockBase.GetProcessingTypeName">
            <summary>
            Gets the name of the processing type
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockBase.GetProcessingTypeName(WaveletStudio.Blocks.BlockBase.ProcessingTypeEnum)">
            <summary>
            Gets the name of a processing type
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockBase.GetAssemblyClassName">
            <summary>
            Gets the name of the class
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockBase.HasParameters">
            <summary>
            Returns wether the block has parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.BlockBase.CurrentDirectory">
            <summary>
            Current opened file
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.BlockBase.GeneratedData">
            <summary>
            Generated data (used only in text-based blocks)
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.BlockBase.Id">
            <summary>
            Id of the block (changes for each instance)
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.BlockBase.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.BlockBase.Description">
            <summary>
            Description of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.BlockBase.Cascade">
            <summary>
            Defines if the Execute method should be cascaded to the connected blocks
            </summary>  
        </member>
        <member name="P:WaveletStudio.Blocks.BlockBase.ProcessingType">
            <summary>
            Type of action done by this block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.BlockBase.Input">
            <summary>
            Gets a signal in the input connector
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.BlockBase.Output">
            <summary>
            Gets a signal in the output connector
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.BlockBase.ProcessingTypeEnum">
            <summary>
            Type of action done by the block
            </summary>
        </member>
        <member name="F:WaveletStudio.Blocks.BlockBase.ProcessingTypeEnum.LoadSignal">
            <summary>
            The block loads an external signal
            </summary>
        </member>
        <member name="F:WaveletStudio.Blocks.BlockBase.ProcessingTypeEnum.CreateSignal">
            <summary>
            The block creates a signal
            </summary>
        </member>
        <member name="F:WaveletStudio.Blocks.BlockBase.ProcessingTypeEnum.Operation">
            <summary>
            The block makes some operation in a block
            </summary>
        </member>
        <member name="F:WaveletStudio.Blocks.BlockBase.ProcessingTypeEnum.Logic">
            <summary>
            Logic operations
            </summary>
        </member>
        <member name="F:WaveletStudio.Blocks.BlockBase.ProcessingTypeEnum.InsertDisturbance">
            <summary>
            The block insert disturbances or noise to the signal
            </summary>
        </member>
        <member name="F:WaveletStudio.Blocks.BlockBase.ProcessingTypeEnum.Export">
            <summary>
            The block exports the signal
            </summary>
        </member>
        <member name="F:WaveletStudio.Blocks.BlockBase.ProcessingTypeEnum.Transform">
            <summary>
            The block operates a transform in the signal
            </summary>
        </member>
        <member name="F:WaveletStudio.Blocks.BlockBase.ProcessingTypeEnum.Routing">
            <summary>
            Signal routing
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ConvolutionBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ConvolutionBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ConvolutionBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.ConvolutionBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.ConvolutionBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.ConvolutionBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ConvolutionBlock.Description">
            <summary>
            Description of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ConvolutionBlock.ConvolutionMode">
            <summary>
            The convolution mode to be used.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ConvolutionBlock.FFTMode">
            <summary>
            The FFT mode to be used on convolution.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ConvolutionBlock.ReturnOnlyValid">
            <summary>
            If true, the block will return only the central part of the convolution resulting in a new signal with (S – F + 1) samples (S = size of signal, F = size of filter). If false, all the convolution will returned and resulting in a new signal with (S + F – 1) samples. Default value is false.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ConvolutionBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.AbsoluteValueBlock">
            <summary>
            <para>Outputs the absolute value of a signal.</para>
            <para>Image: http://i.imgur.com/fzFnv6Z.png </para>
            <para>InOutGraph: http://i.imgur.com/HouxION.png </para>
            <para>Title: Absolute Value</para>
            <example>
                <code>
                    var block = new AbsoluteValueBlock();
                    var signal = new ImportFromTextBlock {Text = "2.1, 3.2, -1, -1.3, -100, -2"};
                    signal.ConnectTo(block);
                    signal.Execute();
                    Console.WriteLine(block.OutputNodes[0].Object.ToString(1));
                    
                    //Console Output:
                    //2.1 3.2 1.0 1.3 100.0 2.0
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.AbsoluteValueBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.AbsoluteValueBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.AbsoluteValueBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.AbsoluteValueBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.AbsoluteValueBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.AbsoluteValueBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.AbsoluteValueBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.AbsoluteValueBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.EmotivRawDataBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.EmotivRawDataBlock.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.EmotivRawDataBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.InputSeriesBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.InputSeriesBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.InputSeriesBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.InputSeriesBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.InputSeriesBlock.Clone">
            <summary>
            Clone the block, including the template
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.InputSeriesBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.InputSeriesBlock.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.InputSeriesBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.InputSeriesBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.OutputSeriesBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.OutputSeriesBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.OutputSeriesBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.OutputSeriesBlock.Clone">
            <summary>
            Clone the block, including the template
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.OutputSeriesBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.OutputSeriesBlock.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.OutputSeriesBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.OutputSeriesBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.RelationalOperatorBlock">
            <summary>
            <para>Conversion to boolean based on &gt;, &lt;, &gt;=, &lt;=, &lt;&gt;, = an static value, the previous sample or the next sample.</para>
            <para>For each sample in the signal S1, the Relational Operation Block will compare the sample using the specified operation and returns 1 if true or 0 if false.</para>
            <para>Image: http://i.imgur.com/yJvRKtq.png </para>
            <para>InOutGraph: http://i.imgur.com/P56gqBS.png </para>
            <para>Title: Relational Operation </para>
            <example>
                <code>
                    var signal1 = new ImportFromTextBlock { Text = "1, 3, -2, 9, 4, 2, 4, 0" };
                    var signal2 = new ImportFromTextBlock { Text = "0, 2, -1, 2, 3, 2, 4, 0" };
                    var block = new RelationalOperatorBlock
                    {
                        Operation = WaveMath.RelationalOperatorEnum.GreaterThan,
                        Operand = RelationalOperatorBlock.OperandEnum.Signal,
                    };
                    
                    signal1.ConnectTo(block);
                    signal2.ConnectTo(block);
                    signal1.Execute();
                    signal2.Execute();
                    
                    Console.WriteLine(block.Output[0].ToString(0));
                    //Console Output:
                    //1 1 0 1 1 0 0 0 
                    //This means that samples at index 0, 1, 3 and 4 of signal1 area greater than the respective samples of signal2
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.RelationalOperatorBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.RelationalOperatorBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.RelationalOperatorBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.RelationalOperatorBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.RelationalOperatorBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.RelationalOperatorBlock.GetAssemblyClassName">
            <summary>
            Gets the name of the class
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.RelationalOperatorBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.RelationalOperatorBlock.Description">
            <summary>
            Description of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.RelationalOperatorBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.RelationalOperatorBlock.Operation">
            <summary>
            Relational operator to be used
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.RelationalOperatorBlock.Operand">
            <summary>
            Operand type
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.RelationalOperatorBlock.OperandEnum">
            <summary>
            Operand type
            </summary>
        </member>
        <member name="F:WaveletStudio.Blocks.RelationalOperatorBlock.OperandEnum.StaticValue">
            <summary>
            An static scalar value
            </summary>
        </member>
        <member name="F:WaveletStudio.Blocks.RelationalOperatorBlock.OperandEnum.PreviousSample">
            <summary>
            The previous sample of the same signal
            </summary>
        </member>
        <member name="F:WaveletStudio.Blocks.RelationalOperatorBlock.OperandEnum.NextSample">
            <summary>
            The next sample of the same signal
            </summary>
        </member>
        <member name="F:WaveletStudio.Blocks.RelationalOperatorBlock.OperandEnum.Signal">
            <summary>
            Another signal (S2)
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.LogicOperationBlock">
            <summary>
            <para>Point-by-point logic operators (AND, OR, NAND, NOR, XOR, NXOR, NOT).</para>
            <para>Image: http://i.imgur.com/UHylTMu.png </para>
            <para>InOutGraph: http://i.imgur.com/YqQmQsr.png </para>
            <para>Title: Logic Port</para>
            <example>
                <code>
                    var signal1 = new ImportFromTextBlock{ Text =  "0, 15, -1, 1, 0, -15, 1,"};
                    var signal2 = new ImportFromTextBlock { Text = "0, -1, 11, 0, 1, 0, 1" };
                    
                    var block = new LogicOperationBlock
                    {
                        Operation = WaveMath.LogicalOperationEnum.And
                    };
                    
                    signal1.ConnectTo(block);
                    signal2.ConnectTo(block);
                    signal1.Execute();
                    signal2.Execute();
                    
                    Console.WriteLine(block.Output[0].ToString(0));
                    //Console Output: 0 1 1 0 0 0 1
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.LogicOperationBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.LogicOperationBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.LogicOperationBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.LogicOperationBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.LogicOperationBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.LogicOperationBlock.GetAssemblyClassName">
            <summary>
            Gets the name of the class
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.LogicOperationBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.LogicOperationBlock.Description">
            <summary>
            Description of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.LogicOperationBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.LogicOperationBlock.Operation">
            <summary>
            Math operation to be used
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.ShiftBlock">
            <summary>
            <para>Shifts a signal in time modifying the Start property.</para>
            <para>Image: http://i.imgur.com/3D9pbJc.png </para>
            <para>InOutGraph: http://i.imgur.com/CZ9mozs.png </para>
            <para>Title: Shift </para>
            <example>
                <code>
                    var block = new ShiftBlock { Delay = 1.7 };
                    var signal = new ImportFromTextBlock { Text = "0, 1, -1, 3, 0", SignalStart = 1 };
                    signal.ConnectTo(block);
                    signal.Execute();
            
                    Console.WriteLine(block.Output[0].Start);
                    //Output: 2.7
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ShiftBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ShiftBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ShiftBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.ShiftBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.ShiftBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.ShiftBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ShiftBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ShiftBlock.Delay">
            <summary>
            Delay in time
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ShiftBlock.DelayIncrement">
            <summary>
            Increment for the delay value
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ShiftBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.SwitchBlock">
            <summary>
            <para>Switch output between first input (A) and third input (B) based on value of second input or the threshold value, using the specified switch criteria.</para>
            <para>For example, let’s consider the following scenario:</para>
            <code>
            Signal A: 1, 3, 4, -4, 8, 3, 2, -10
            Signal B: 3, -2, 4, -6, 7, 1, 4, 3
            Threshold: 2
            Switch Criteria: Select B when B is greater than threshold
            </code>
            <para>The Switch Criteria is a parameter defining when the value of the signal B will be selected, instead of selecting the value of the signal A. The block will output a new signal with the folowing samples:</para>
            <code>
            3 3 4 -4 7 3 4 3
            </code>
            <para>The #1 sample (3) was selected from signal B (the value from B is greater than the threshold);</para>
            <para>The #2 sample (3) was selected from signal A (the value from B is not greater than the threshold);</para>
            <para>The #3 sample (4) was selected from signal B (the value from B is greater than the threshold);</para>
            <para>and so on.</para>
            <para>Image: http://i.imgur.com/V34q36D.png </para>
            <para>InOutGraph: http://i.imgur.com/16EmhjY.png </para>
            <para>Title: Switch </para>
            <para>Inputs: 0 - Signal A</para>
            <para>Inputs: 1 - Threshold signal(optional)</para>
            <para>Inputs: 2 - Signal B</para>
            <para>Outputs: This block outputs a single signal or a signal list of switched samples.</para>
            <example>
                <code>
                    var signal1 = new ImportFromTextBlock { Text = "1, 3, 4, -4, 8, 3, 2, -10" };
                    var signal2 = new ImportFromTextBlock { Text = "3, -2, 4, -6, 7, 1, 4, 3" };
                    var block = new SwitchBlock 
                    { 
                        StaticThreshold = 2, 
                        SwitchCriteria = WaveMath.SwitchCriteriaEnum.BIsGreaterThanThreshold 
                    };
                    signal1.OutputNodes[0].ConnectTo(block.InputNodes[0]);
                    signal2.OutputNodes[0].ConnectTo(block.InputNodes[2]);
                    signal1.Execute();
                    signal2.Execute();
                    
                    Console.WriteLine(block.OutputNodes[0].Object.ToString(0));
                    //Output: 3 3 4 -4 7 3 4 3
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.SwitchBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.SwitchBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.SwitchBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.SwitchBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.SwitchBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.SwitchBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.SwitchBlock.SwitchCriteria">
            <summary>
            Defines when the value of the signal B will be selected, instead of selecting the value of the signal A
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.SwitchBlock.StaticThreshold">
            <summary>
            Assign the switch threshold that determines which input the block passes to the output. You can use this parameter to set a static value, or use the second input of the block to define a signal as a threshold.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.SwitchBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.SwitchBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.CustomAttributes.TemplateNamesTypeConverter">
            <summary>
            Template names type converter
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.CustomAttributes.ListTypeConverter">
            <summary>
            Base type converter
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.ListTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns wether standard values are supported
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.ListTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns wether standard values are exclusive
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.ListTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns the standard values
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.TemplateNamesTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns the available templates.
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.CustomAttributes.WaveletNamesTypeConverter">
            <summary>
            Wavelet names type converter
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.WaveletNamesTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns the available wavelets.
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.CustomAttributes.GlobalizedPropertyDescriptor">
            <summary>
            Gets the name and description of parameters from the resource file
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.GlobalizedPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.GlobalizedPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Returns whether resetting an object changes its value.
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.GlobalizedPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the current value of the property on a component.
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.GlobalizedPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Resets the value for this property of the component to the default value.
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.GlobalizedPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Determines a value indicating whether the value of this property needs to be persisted.
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.GlobalizedPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the component to a different value.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.CustomAttributes.GlobalizedPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of the component this property is bound to.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.CustomAttributes.GlobalizedPropertyDescriptor.DisplayName">
            <summary>
            Gets the parameter display name
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.CustomAttributes.GlobalizedPropertyDescriptor.Description">
            <summary>
            Gets the parameter description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.CustomAttributes.GlobalizedPropertyDescriptor.IsReadOnly">
            <summary>
            Gets a value indicating whether this property is read-only.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.CustomAttributes.GlobalizedPropertyDescriptor.Name">
            <summary>
            Gets the name of the member.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.CustomAttributes.GlobalizedPropertyDescriptor.PropertyType">
            <summary>
             Gets the type of the property.
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.DemuxBlock">
            <summary>
            <para>Extracts the components of an input signal and outputs the components as separate signals.</para>
            <para>Image: http://i.imgur.com/pKW0rXZ.png </para>
            <para>InOutGraph: http://i.imgur.com/cHMpTVx.png </para>
            <para>Title: Demux </para>
            <example>
                <code>
                    var signal = new ImportFromTextBlock {Text = "0, 3, -1, 2, 0, \r\n 0, -1, 2, 3, 0"};
                    var block = new DemuxBlock { OutputCount = 2 };
                    signal.ConnectTo(block);
                    signal.Execute();
                    
                    Console.WriteLine("Signal 1 = " + block.OutputNodes[0].Object.ToString(0));
                    Console.WriteLine("Signal 2 = " + block.OutputNodes[1].Object.ToString(0));
                    
                    //Console Output:
                    //Signal 1 = 0 3 -1 2 0
                    //Signal 2 = 0 -1 2 3 0
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.DemuxBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.DemuxBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.DemuxBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.DemuxBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.DemuxBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.DemuxBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.DemuxBlock.OutputCount">
            <summary>
            Number of output ports
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.DemuxBlock.SignalIndexes">
            <summary>
            Indexes of the signals to be copied in the output. One line per output, separated with commas (,).
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.DemuxBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.DemuxBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.CustomAttributes.TextParameter">
            <summary>
            Parameter
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.CustomAttributes.Parameter">
            <summary>
            Block Parameter
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.Parameter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.Parameter.#ctor(System.String,System.String)">
            <summary>
            Constructor passing the resource names of the name and description of the parameter.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.CustomAttributes.Parameter.NameResourceName">
            <summary>
            Resource name of the name of the parameter.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.CustomAttributes.Parameter.DescriptionResourceName">
            <summary>
            Resource name of the description of the parameter.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.CustomAttributes.Parameter.CausesRefresh">
            <summary>
            When value is changed, GUI should refresh the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.TextParameter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.CustomAttributes.TextParameter.#ctor(System.String,System.String)">
            <summary>
            Constructor passing the resource names of the name and description of the parameter.
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.MuxBlock">
            <summary>
            <para>Combine several input signals into vector.</para>
            <para>For example, if we connect 3 blocks to the MuxBlock, it will output a single signal list, with 3 items.</para>
            <para>Image: http://i.imgur.com/d3hUAji.png </para>
            <para>InOutGraph: http://i.imgur.com/Ds4ezaH.png </para>
            <para>Title: Mux</para>
            <example>
                <code>
                    var signal1 = new ImportFromTextBlock { Text = "1, 7, 3, 1" };
                    var signal2 = new ImportFromTextBlock { Text = "5, 7, 2, 8" };
                    var signal3 = new ImportFromTextBlock { Text = "9, 8, 4, 3" };
                    var block = new MuxBlock { InputCount = 3 };
                    signal1.ConnectTo(block);
                    signal2.ConnectTo(block);
                    signal3.ConnectTo(block);
                    signal1.Execute();
                    signal2.Execute();
                    signal3.Execute();
                
                    Console.WriteLine(block.OutputNodes[0].Object.Count);
                    Console.WriteLine(block.Output[0, 0].ToString(0));
                    Console.WriteLine(block.Output[0, 1].ToString(0));
                    Console.WriteLine(block.Output[0, 2].ToString(0));
                    
                    //Output:
                    //3
                    //1 7 3 1
                    //5 7 2 8
                    //9 8 4 3
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.MuxBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.MuxBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.MuxBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.MuxBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.MuxBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.MuxBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.MuxBlock.InputCount">
            <summary>
            Number of inputs
            </summary> //
        </member>
        <member name="P:WaveletStudio.Blocks.MuxBlock.SignalNames">
            <summary>
            Signal names used in the output (optional, one per line)
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.MuxBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.MuxBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.RepeatBlock">
            <summary>
            <para>Repeats samples of a signal.</para>
            <para> </para>
            <para>For example, if we have a signal with 8 samples like this one:</para>
            <code>1, 9, 0, 1, 2, 5, -4, 4</code>
            <para>and set the FrameSize parameter to 4, the block will output a new signal with the folowing samples:</para>
            <code>1, 9, 0, 1,   1, 9, 0, 1,   2, 5, -4, 4,   2, 5, -4, 4</code>
            <para>Image: http://i.imgur.com/LC6BDlw.png </para>
            <para>InOutGraph: http://i.imgur.com/Pkjnhp9.png </para>    
            <para>Title: Repeat </para>
            <example>
                <code>
                    var signal = new ImportFromTextBlock { Text = "0, 3, -3, 0, 2, 2, 2, 0" };
                    var block = new RepeatBlock
                    { 
                        FrameSize = 4, 
                        RepetitionCount = 1
                    };
                    signal.ConnectTo(block);
                    signal.Execute();
                    
                    Console.WriteLine(block.Output[0].ToString(0));
                    //Output: 0 3 -3 0 0 3 -3 0 2 2 2 0 2 2 2 0
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.RepeatBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.RepeatBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.RepeatBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.RepeatBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.RepeatBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.RepeatBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.RepeatBlock.FrameSize">
            <summary>
            The number of times the block will repeat the frame. Default value is 1.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.RepeatBlock.RepetitionCount">
            <summary>
            The number of samples to be repeated per time. Default value is 1.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.RepeatBlock.KeepSamplingRate">
            <summary>
            If true, keeps the original sampling rate, changing the signal start and finish times
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.RepeatBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.RepeatBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.InterpolationBlock">
            <summary>
            <para>Increases the sampling rate of a signal using linear, nearest, cubic, Newton’s or polynomial interpolation methods.</para>
            <para>Image: http://i.imgur.com/qxPtNRn.png </para>
            <para>InOutGraph: http://i.imgur.com/sGvyqsu.png </para>
            <para>Title: Interpolation </para>
            <example>
                <code>
                    //Creates a signal with 4 samples
                    var signal = new ImportFromTextBlock { Text = "14, 20, 11, 41" };
                    var block = new InterpolationBlock
                    {
                        Factor = 10, //(will insert 9 samples)
                        Mode=InterpolationModeEnum.Polynomial
                    };
                                
                    //Connect and execute blocks
                    signal.ConnectTo(block);
                    signal.Execute();
                    
                    Console.WriteLine(block.Output[0].ToString(1));
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.InterpolationBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.InterpolationBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.InterpolationBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.InterpolationBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.InterpolationBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.InterpolationBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.InterpolationBlock.Description">
            <summary>
            Description of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.InterpolationBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.InterpolationBlock.Mode">
            <summary>
            Defines the interpolation method used by the block:
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.InterpolationBlock.Factor">
            <summary>
            Defines the interpolation factor used in the interpolation function or how many 
            samples will be inserted between samples of the signal. Default value is 5 (insert 4 samples).
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.NormalDistributionBlock">
            <summary>
            Gets the normal distribution of a signal
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.NormalDistributionBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.NormalDistributionBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.NormalDistributionBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.NormalDistributionBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.NormalDistributionBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.NormalDistributionBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.NormalDistributionBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.NormalDistributionBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.NormalDistributionBlock.Mean">
            <summary>
            Mean of the signal to be used in the calc. 0 for automatic.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.NormalDistributionBlock.StandardDeviation">
            <summary>
            Standard deviation to be used in the calc. 0 for automatic.
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.InvertBlock">
            <summary>
            <para> </para>
            <para>Inverts a signal in time. </para>
            <para>For example, if we have a signal with 8 samples like this one:</para>
            <para> </para>
            <code>2, 3, -4, 8, 7, 1, 2, -3</code>
            <para> </para>
            <para>the block will output a new signal with the folowing samples:</para>
            <para> </para>
            <code>-3, 2, 1, 7, 8, -4, 3, 2</code>
            <para> </para>
            <para>This block has no inputs.</para>
            <para>Image: http://i.imgur.com/7PhV0G4.png </para>
            <para>InOutGraph: http://i.imgur.com/nXdS5DB.png </para>
            <para>Title: Invert </para>
            <example>
                <code>
                    var signal = new ImportFromTextBlock { Text = "2, 3, -4, 8, 7, 1, 2, -3" };
                    var block = new InvertBlock();
                    signal.ConnectTo(block);
                    signal.Execute();
                    
                    Console.WriteLine(block.Output[0].ToString(0));
                    //Output: -3 2 1 7 8 -4 3 2
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.InvertBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.InvertBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.InvertBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.InvertBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.InvertBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.InvertBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.InvertBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.InvertBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.ScaleBlock">
            <summary>
            <para>Dilate or contract a signal in time and/or amplitude.</para>
            <para>Image: http://i.imgur.com/quStjHO.png </para>
            <para>InOutGraph: http://i.imgur.com/Loo4dme.png </para>
            <para>Title: Scale </para>
            <example>
                <code>
                    var signal = new ImportFromTextBlock { Text = "1, 3, -2, 9, 4.5, -2, 4, 0" };
                    var block = new ScaleBlock
                    {
                        TimeScalingFactor = 2,
                        AmplitudeScalingFactor = 1.5
                    };
                
                    signal.ConnectTo(block);
                    signal.Execute();
                
                    Console.WriteLine(block.Output[0].ToString(0, ", "));    
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ScaleBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ScaleBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ScaleBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.ScaleBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.ScaleBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.ScaleBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ScaleBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ScaleBlock.TimeScalingFactor">
            <summary>
            Factor to be used in time scaling. If the value is setted to 1, no scaling will be applied to the time variable.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ScaleBlock.AmplitudeScalingFactor">
            <summary>
            Factor to be used in amplitude scaling. If the value is setted to 1, no scaling will be applied to the amplitude variable.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ScaleBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.UniqueBlock">
            <summary>
            <para>Removes duplicated samples in a signal.</para>
            <para> </para>
            <para>For example, if we have a signal with 8 samples like this one:</para>
            <code>1, 3, -4, 8, 3, 4, 1, -3</code>
            <para>the block will output a new signal with the folowing samples:</para>
            <code>1, 3, -4, 8, 4, -3</code>
            <para>Image: http://i.imgur.com/fVvqcwZ.png </para>
            <para>InOutGraph: http://i.imgur.com/HdzUh01.png </para>
            <para>Title: Unique </para>
            <example>
                <code>
                    var signal = new ImportFromTextBlock { Text = "1, 3, -4, 8, 3, 4, 1, -3" };
                    var block = new UniqueBlock 
                    { 
                        SortSamples = false 
                    };
                    
                    signal.ConnectTo(block);
                    signal.Execute();
                    
                    Console.WriteLine(block.Output[0].ToString(0));
                    //Output: 1, 3, -4, 8, 4, -3
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.UniqueBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.UniqueBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.UniqueBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.UniqueBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.UniqueBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.UniqueBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.UniqueBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.UniqueBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.UniqueBlock.SortSamples">
            <summary>
            If true, the block sorts the samples after remove the duplicated samples. Default value is true.
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.IDWTBlock">
            <summary>
            <para>The IDWT block reconstructs a signal using the specified wavelet coefficients.</para>
            <para>Image: http://i.imgur.com/ta1Fi8v.png </para>
            <para>InOutGraph: http://i.imgur.com/53Dc5F8.png </para>
            <para>Title: IDWT </para>
            <para>Outputs: This block has two inputs:</para>
            <para>Outputs:  0 – Aproximation Coefficients of decomposition</para>
            <para>Outputs:  1 – Details coefficients of decomposition</para>
            <para>Inputs: This block has only one output: the reconstructed signal.</para>
            
            <example>
                <code>
                var approximation = new ImportFromTextBlock { Text = "0.0, 0.0, 1.4, 1.4, 0.0, 0.0, 1.4, 1.4, 0.0, 0.0, 1.5, 1.3, 0.0, 0.0, 1.4, 1.4" };
                var details = new ImportFromTextBlock { Text = "0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -0.1, 0.0, 0.0, 0.0, 0.0" };
                var block = new IDWTBlock
                {
                    WaveletName = "haar",
                    Level = 1
                };
                
                var signalList = new BlockList { approximation, details, block };            
                approximation.ConnectTo(block);
                details.ConnectTo(block);
                signalList.ExecuteAll();
                
                Console.WriteLine(block.OutputNodes[0].Object.ToString(1));
            
                //Console Output:
                //0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 0.0 1.0 1.1 0.8 1.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 0.0
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.IDWTBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.IDWTBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.IDWTBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.IDWTBlock.Clone">
            <summary>
            Clone the block, including the template
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.IDWTBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.IDWTBlock.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.IDWTBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.IDWTBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.IDWTBlock.WaveletNameList">
            <summary>
            Available wavelet functions
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.IDWTBlock.WaveletName">
            <summary>
            Wavelet function to be used
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.IDWTBlock.Level">
            <summary>
            Number of levels
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.UpSampleBlock">
            <summary>
            <para>Resample input at higher rate by inserting zeros.</para>
            <para> </para>
            <para>For example, if we have a signal with 8 samples like this one:</para>
            <code>1.1, 9.12, 0.123, 1, 1.1, 4.56, 0.123, -45</code>
            <para>the block will output a new signal with the folowing samples:</para>
            <code>1.1, 0, 9.12, 0, 0.123, 0, 1, 0, 1.1, 0, 4.56, 0, 0.123, 0, -45</code>
            <para>Image: http://i.imgur.com/zOOdBZS.png </para>
            <para>InOutGraph: http://i.imgur.com/SS0Uk7T.png </para>
            <para>Title: Upsample</para>
            <example>
                <code>
                    var signal = new ImportFromTextBlock { Text = "2, 3, -1, 1" };
                    var block = new UpSampleBlock 
                    {
                        Factor = 3
                    };
                    
                    signal.ConnectTo(block);
                    signal.Execute();
            
                    Console.WriteLine(block.Output[0].ToString(0));
                    //Output: 2 0 0 3 0 0 -1 0 0 1
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.UpSampleBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.UpSampleBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.UpSampleBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.UpSampleBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.UpSampleBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.UpSampleBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.UpSampleBlock.Factor">
            <summary>
            Upsample factor. Default value is 2.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.UpSampleBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.UpSampleBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.ImportFromTextBlock">
            <summary>
            <para>Generates a signal based on a text.</para>
            <para>Image: http://i.imgur.com/Hr0LdvL.png </para>
            <para>InOutGraph: http://i.imgur.com/7CCftqM.png </para>
            <para>This block has no inputs.</para>
            <para>Title: Import from Text</para>
            <example>
                <code>
                    var block = new ImportFromTextBlock
                    {
                        Text = "0, 2, -1, 4.1, 3, -1, 4, 0",
                        ColumnSeparator = ",",
                        SignalStart = 0,
                        SamplingInterval = 0.1,
                        SignalNameInFirstColumn = false
                    };
                    block.Execute();
                    
                    Console.WriteLine(block.Output[0].ToString(1, ","));
                    
                    //Console Output: 0.0, 2.0, -1.0, 4.1, 3.0, -1.0, 4.0, 0.0
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ImportFromTextBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ImportFromTextBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ImportFromTextBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.ImportFromTextBlock.Clone">
            <summary>
            Clone the block, including the template
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.ImportFromTextBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.ImportFromTextBlock.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ImportFromTextBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ImportFromTextBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ImportFromTextBlock.Text">
            <summary>
            The text to be processed.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ImportFromTextBlock.ColumnSeparator">
            <summary>
            The string to be used to split the data. Default value is “,”.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ImportFromTextBlock.SignalStart">
            <summary>
            The start of the signal in time. Used to plot the data properly. Default value is 0.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ImportFromTextBlock.SamplingInterval">
            <summary>
            The number of samples per unit of time. Used to plot the data properly. Default value is 0.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ImportFromTextBlock.SignalNameInFirstColumn">
            <summary>
            If true, the first column in the file will be used as the name of the signal. Default value is false.
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.ExportToCSVBlock">
            <summary>
            <para>Exports a single signal or a signal list to a CSV file.</para>
            <para>A CSV (comma-separated values) is a text file with the data (samples) separated with commas or another character.</para>
            <para>This block has no outputs.</para> 
            <para>Image: http://i.imgur.com/bA6qk6M.png </para>
            <para>Title: Export CSV </para>
            <example>
                <code>
                    var signal = new ImportFromTextBlock { Text = "1, 2, 3, 4, -1" };
                    var block = new ExportToCSVBlock
                    {
                        FilePath = "file1.csv",
                        ColumnSeparator = ";", 
                        IncludeSignalNameInFirstColumn = true,
                        DecimalPlaces = 1
                    };
                    signal.ConnectTo(block);
                    signal.Execute();
                
                    //Ouput in file1.csv
                    //Line 1;1.0;2.0;3.0;4.0;-1.0
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ExportToCSVBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ExportToCSVBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ExportToCSVBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.ExportToCSVBlock.Clone">
            <summary>
            Clone the block, including the template
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.ExportToCSVBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.ExportToCSVBlock.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ExportToCSVBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ExportToCSVBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ExportToCSVBlock.FilePath">
            <summary>
            The path to the file. You can use a relative (ex.: ../file.csv) or absolute path (ex.: C:\file.csv). Default value is “output.csv”.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ExportToCSVBlock.ColumnSeparator">
            <summary>
            The string to be used to split the data. Default value is “,”.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ExportToCSVBlock.DecimalPlaces">
            <summary>
            The number of decimal places to be used in the output file. Default value is 3.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ExportToCSVBlock.IncludeSignalNameInFirstColumn">
            <summary>
            Include signal name in first column.
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.SignalExtensionBlock">
            <summary>
            <para>Extends a signal using the specified mode.</para>
            <para>Image: http://i.imgur.com/WDWxwms.png </para>
            <para>InOutGraph: http://i.imgur.com/W9tQojd.png </para>
            <para>Title: Signal Extension </para>
            <example>
                <code>
                    var signal = new ImportFromTextBlock{Text = "1, 2, 3, 4, 5, 6, 7, 8"};
                    var block = new SignalExtensionBlock
                    {
                        ExtensionMode = SignalExtension.ExtensionMode.SymmetricHalfPoint,
                        ExtensionSize = 2
                    };
                    signal.ConnectTo(block);
                    signal.Execute();
            
                    Console.WriteLine(block.Output[0].ToString(0));
                    //Output: 2 1 1 2 3 4 5 6 7 8 8 7
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.SignalExtensionBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.SignalExtensionBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.SignalExtensionBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.SignalExtensionBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.SignalExtensionBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.SignalExtensionBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.SignalExtensionBlock.Description">
            <summary>
            Description of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.SignalExtensionBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.SignalExtensionBlock.ExtensionMode">
            <summary>
            One of the following extension modes:
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.SignalExtensionBlock.ExtensionSize">
            <summary>
            Extension size. If zero (default), extents no next power of 2.
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.DWTBlock">
            <summary>
            <para>The DWT block decomposes a signal using the specified wavelet function.</para>
            <para>Image: http://i.imgur.com/eB1KiuV.png </para>
            <para>InOutGraph: http://i.imgur.com/4vDa0Ta.png </para>
            <para>Title: DWT </para>
            <para>Inputs: This block has only one input: the signal to perform the wavelet decomposition.</para>
            <para>Outputs: This block has four outputs:</para>
            <para>Outputs:  0 – Approximation (Apx): Decomposition approximation levels</para>
            <para>Outputs:  1 – Details (Det): Decomposition details levels</para>
            <para>Outputs:  2 – Reconstruction (Rc): Reconstruction of the signal</para>
            <para>Outputs:  3 – All: List with all the previous outputs.</para>
            
            <example>
                <code>
                    var signal = new ImportFromTextBlock { Text = "0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1.1, 0.9, 1, 0, 0, 0, 0, 1, 1, 1, 1" };
                    var block = new DWTBlock
                    {
                        WaveletName = "haar",
                        Level = 1,
                        Rescale = true
                    };
                    
                    signal.ConnectTo(block);
                    signal.Execute();
                    
                    Console.WriteLine("APX: " + block.OutputNodes[0].Object.ToString(1));
                    Console.WriteLine("DET: " + block.OutputNodes[1].Object.ToString(1));
                    Console.WriteLine("RC:  " + block.OutputNodes[2].Object.ToString(1));            
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.DWTBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.DWTBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.DWTBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.DWTBlock.Clone">
            <summary>
            Clone the block, including the template
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.DWTBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.DWTBlock.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.DWTBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.DWTBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.DWTBlock.WaveletNameList">
            <summary>
            Available wavelet functions
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.DWTBlock.WaveletName">
            <summary>
            <para>One of following wavelet functions name:</para>
            <para>- Coiflet wavelets: coif1, coif2, coif3, coif4, coif5</para>
            <para>- Daubechies wavelets: db2, db3, db4, db5, db6, db7, db8, db9, db10</para>
            <para>- Haar wavelet (db1): haar</para>
            <para>- Discreete Meyer wavelet: dmeyer</para>
            <para>- Symlet wavelet: sym2, sym3, sym4, sym5, sym6, sym7, sym8</para>
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.DWTBlock.Level">
            <summary>
            Number of levels of decomposition.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.DWTBlock.Rescale">
            <summary>
            Rescale outputs in the "ALL" output to the original signal size, reverting the downsample and extension effects. Warning: the "ALL" output will be modified, and the signal in this output cannot be reconstructed. Default value is false.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.DWTBlock.ExtensionMode">
            <summary>
            Extension mode
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.ImportFromCSVBlock">
            <summary>
            <para>Generates a signal based on a CSV file.</para>
            <para>A CSV (comma-separated values) is a text file with the data (samples) separated with commas or another char. Each line in the file represents a signal. For example:</para>
            <code>
                signal_name,sample1,sample2,sample3,sample4
                Signal1, 1.1, 9.12, 0.123, 0
                Signal2, 1.1, 4.56, 0.123, -45
            </code>
            <para>This example shows a file with 2 signals, with 4 samples in each one. The first column in the file is optional and represents the name of the signal. The header is optional too.</para>
            <para>Image: http://i.imgur.com/ApwmTG2.png </para>
            <para>InOutGraph: http://i.imgur.com/yUw6HcU.png </para>
            <para>Title: Import CSV</para>
            <para>This block has no inputs.</para>
            <example>
                <code>
                    File.WriteAllText(@"C:\Temp\File.csv", "0, 2, -1, 4.1, 3, -1, 4, 0");
                
                    var block = new ImportFromCSVBlock
                    {
                        ColumnSeparator = ",",
                        SignalStart = 0,
                        SamplingInterval = 0.1,
                        IgnoreFirstRow = false,
                        SignalNameInFirstColumn = false,
                        FilePath = @"C:\Temp\File.csv"
                    };
                    block.Execute();
                    
                    Console.WriteLine(block.Output[0].ToString(1, ","));
                    
                    //Console Output: 0.0, 2.0, -1.0, 4.1, 3.0, -1.0, 4.0, 0.0
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ImportFromCSVBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ImportFromCSVBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ImportFromCSVBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.ImportFromCSVBlock.Clone">
            <summary>
            Clone the block, including the template
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.ImportFromCSVBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.ImportFromCSVBlock.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ImportFromCSVBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ImportFromCSVBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ImportFromCSVBlock.FilePath">
            <summary>
            Absolute or relative path to the file
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ImportFromCSVBlock.ColumnSeparator">
            <summary>
            Column separator
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ImportFromCSVBlock.SignalStart">
            <summary>
            Signal start
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ImportFromCSVBlock.SamplingInterval">
            <summary>
            Sampling interval
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ImportFromCSVBlock.IgnoreFirstRow">
            <summary>
            Ignore first row when reading the file
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ImportFromCSVBlock.SignalNameInFirstColumn">
            <summary>
            If true, the first column contains the name of the signal
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.SampleBasedOperationBlock">
            <summary>
            <para>Sum, subtract, multiply or divide two or more signals, sample-by-sample.</para>
            <para>Image: http://i.imgur.com/uC6ViMz.png </para>
            <para>InOutGraph: http://i.imgur.com/4esHEoS.png </para>
            <para>Title: Operation </para>
            <example>
                <code>
                    var signal1 = new ImportFromTextBlock { Text = "1, 3, -2, 9, 4, -2, 4, 0" };
                    var signal2 = new ImportFromTextBlock { Text = "0, 2, -1, 2, 3, 2, 4, 0" };
                    var block = new SampleBasedOperationBlock
                    {
                        Operation = WaveMath.OperationEnum.Multiply                
                    };
                    
                    signal1.ConnectTo(block);
                    signal2.ConnectTo(block);
                    signal1.Execute();
                    signal2.Execute();
                    
                    Console.WriteLine(block.Output[0].ToString(0));
                    //Console Output:
                    //0 6 3 18 12 -4 16 0
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.SampleBasedOperationBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.SampleBasedOperationBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.SampleBasedOperationBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.SampleBasedOperationBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.SampleBasedOperationBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.SampleBasedOperationBlock.GetAssemblyClassName">
            <summary>
            Gets the name of the class
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.SampleBasedOperationBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.SampleBasedOperationBlock.Description">
            <summary>
            Description of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.SampleBasedOperationBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.SampleBasedOperationBlock.Operation">
            <summary>
            Math operation to be used
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.RampFunctionBlock">
            <summary>
            <para>Generates a Ramp signal.</para>
            <para>The signal is generated by the following function:</para>
            <para>
                <code>
                    y(t) = A * (t - t0) + D     ∀ t &gt;= t0, t &lt;= t1
                    y(t) = D                    ∀ t &lt; t0
                    y(t) = D + x(t1)            ∀ t &gt; t1 | D  (if ReturnToZero parameter is true)
                </code>
            </para>
            <para>Where:</para>
            <para>A := amplitude</para>
            <para>D := offset</para>
            <para>t0 := ramp start</para>
            <para>t1 := ramp finish</para>
            <para>This block has no inputs.</para>
            <para>Image: http://i.imgur.com/o0NVryg.png </para>
            <para>InOutGraph: http://i.imgur.com/Vr3VOtk.png </para>
            <para>Title: Ramp Function </para>
            <example>
                <para>In this example we create a signal in a ramp shape. The signal starts at 0s and ends at 16s. The ramp starts at 3s and ends at 8s. The sampling rate is 1 (1Hz). The amplitude of the ramp is 1 and the signal offset is 1. The signal will return to the offset value (1) after the end of the ramp (8s). The last sample of the signal is included.</para>
                <code>
                    var block = new RampFunctionBlock
                    {
                        Start = 0,
                        Finish = 16,
                        RampStart = 3,
                        RampFinish = 8,
                        SamplingRate = 1,
                        Amplitude = 1,
                        Offset = 1,
                        ReturnToZero = true,
                        IgnoreLastSample = false
                    };
                    block.Execute();
            
                    Console.WriteLine(block.Output[0].ToString(0));
                    //Console Output:
                    //1, 1, 1, 1, 2, 3, 4, 5, 6, 1, 1, 1, 1, 1, 1, 1, 1
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.RampFunctionBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.RampFunctionBlock.GetFinish">
            <summary>
            Get the finish of the signal considering the seleccted EndingOption
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.RampFunctionBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.RampFunctionBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.RampFunctionBlock.Clone">
            <summary>
            Clone the block, including the template
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.RampFunctionBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.RampFunctionBlock.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.RampFunctionBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.RampFunctionBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.RampFunctionBlock.Amplitude">
            <summary>
            Amplitude of the ramp. Default value is 1.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.RampFunctionBlock.Offset">
            <summary>
            Offset of the signal in the y axis. Default value is 0.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.RampFunctionBlock.Start">
            <summary>
            Start of the signal in the time. Default value is 0.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.RampFunctionBlock.Finish">
            <summary>
            Finish of the signal in the time. Default value is 1.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.RampFunctionBlock.RampStart">
            <summary>
            Start of the ramp in the time. Default value is 0.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.RampFunctionBlock.RampFinish">
            <summary>
            Finish of the ramp in the time. Default value is 1.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.RampFunctionBlock.SamplingRate">
            <summary>
            Sampling rate used on signal generation. Default value is 32768 (32KHz).
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.RampFunctionBlock.IgnoreLastSample">
            <summary>
            If true, the last sample is not included in the created signal. Default value is false.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.RampFunctionBlock.SamplingInterval">
            <summary>
            Gets or sets  the interval of samples (1/SamplingRate)
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.RampFunctionBlock.ReturnToZero">
            <summary>
            If true, the value will return to 0 at the finish of the ramp. Default value is true.
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.IFFTBlock">
            <summary>
            <para>Executes the Backward Fast Fourier Transform (FFT) using the Managed FFT function.</para>
            <para>Image: http://i.imgur.com/AeAyClJ.png </para>
            <para>InOutGraph: http://i.imgur.com/qPxeOtO.png </para>
            <para>Title: IFFT </para>
            <example>
                <code>
                    var freqInput = new ImportFromTextBlock { Text = "12.3, 0.0, 4.5, 7.2, -5.8, 4.5, -7.5, -2.3, -2.8, 0.0, -7.5, 2.3, -5.8, -4.5, 4.5, -7.2" };
                    var block = new IFFTBlock
                    {
                        Mode = ManagedFFTModeEnum.UseLookupTable
                    };
                
                    freqInput.ConnectTo(block);
                    freqInput.Execute();
                
                    Console.WriteLine(block.OutputNodes[0].Object.ToString(1));            
                
                    //Console output:
                    //-1.0, 6.0, 5.0, -0.5, 0.5, 0.0, 0.3, 2.0
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.IFFTBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.IFFTBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.IFFTBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.IFFTBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.IFFTBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.IFFTBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.IFFTBlock.Description">
            <summary>
            Description of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.IFFTBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.IFFTBlock.Mode">
            <summary>
            Computation mode
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.FFTBlock">
            <summary>
            <para>Executes the Forward Fast Fourier Transform (FFT) using the Managed FFT function.</para>
            <para>Image: http://i.imgur.com/tpcUlFu.png </para>
            <para>InOutGraph: http://i.imgur.com/MRddB2k.png </para>
            <para>Title: FFT </para>
            <para>Inputs: This block has only one input: the signal or signal list to be computed.</para>
            <para>Outputs: This block has two outputs:</para>
            <para>Outputs:  0 – Absolute Value (abs): Absolute values of transform. Usefull to plot the transform.</para>
            <para>Outputs:  1 – Complex FFT (fft): Complex values of transform (real and imaginary part). You must use this output if you plan to reconstruct the original signal.</para>
            <example>
                <code>
                    var signal = new ImportFromTextBlock { Text = "-1, 6, 5, -0.5, 0.5, 0, 0.25, 2, 0, -4, 4, 0, 1, -3, -1, 2, -3, 0, 0, 3, 0, -0.1, 1, 1.1, -3, 0, 0, 1, 5, -1, -0.5, -4.5, -4, 4, 0, -0.25, 3, 2" };
                    var block = new FFTBlock
                    {
                        Mode = ManagedFFTModeEnum.UseLookupTable
                    };
                    
                    signal.ConnectTo(block);
                    signal.Execute();
                    
                    Console.WriteLine("Abs: " + block.OutputNodes[0].Object.ToString(1));
                    Console.WriteLine("FFT: " + block.OutputNodes[1].Object.ToString(1));
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.FFTBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.FFTBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.FFTBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.FFTBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.FFTBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.FFTBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.FFTBlock.Description">
            <summary>
            Description of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.FFTBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.FFTBlock.Mode">
            <summary>
            Computation mode
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.DownSampleBlock">
            <summary>
            <para>Decreases the sampling rate of the input by deleting samples. </para>
            <para>Image: http://i.imgur.com/Jv0LDXT.png </para>
            <para>InOutGraph:  http://i.imgur.com/Rd79evq.png </para>
            <para>Title: Downsample </para>
            <example>
                <code>
                    var signal = new ImportFromTextBlock { Text = "0, 1, -1, 5, 4, -1, 0" };
                    var block = new DownSampleBlock();
                    
                    signal.ConnectTo(block);
                    signal.Execute();
            
                    Console.WriteLine(block.OutputNodes[0].Object.ToString(0));
                    //Console Output:
                    //0 -1 4 0
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.DownSampleBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.DownSampleBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.DownSampleBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.DownSampleBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.DownSampleBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.DownSampleBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.DownSampleBlock.Description">
            <summary>
            Description of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.DownSampleBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.DownSampleBlock.Factor">
            <summary>
            Downsample factor. Default is 2.
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.CustomAttributes.SingleInputOutputBlock">
            <summary>
            Defines a block that receives nothing or only one signal as input and returns only one signal as output
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.GenerateSignalBlock">
            <summary>
            <para>Generates a signal based on one of the following templates:</para>
            <para> </para>
            <para>Sine     :=  y(x) = A * sin(2 * PI * t) + D</para>
            <para>Cosine   :=  y(x) = A * cos(2 * PI * t) + D</para>
            <para>Sawtooth :=  y(x) = A * 2*(t - floor(t+0.5)) + D</para>
            <para>Square   :=  y(x) = A * sign(sin(2 * PI * t)) + D</para>
            <para>Triangle :=  y(x) = A * (1-4*abs(round(t-0.25)-(t-0.25))) + D</para>
            <para> </para>
            <para>Where:</para>
            <para>A := Amplitude</para>
            <para>D := Offset</para>
            <para>t := f*x+φ</para>
            <para>f := Frequency</para>
            <para>φ := Phase</para>
            <para> </para>
            <para>This block has no inputs.</para>
            <para>Image: http://i.imgur.com/NHAXyQY.png </para>
            <para>InOutGraph: http://i.imgur.com/UXmuIau.png </para>
            <para>Title: Generate Signal </para>
            <example>
                <code>
                    var block = new GenerateSignalBlock
                    {
                        TemplateName = "Sine",
                        Amplitude = 2.1,
                        Frequency = 2,
                        Phase = 0.5,
                        Offset = 0.2,
                        Start = 0,
                        Finish = 5,
                        SamplingRate = 15,
                        IgnoreLastSample = true
                    };
                    block.Execute();
                    
                    Console.WriteLine(block.OutputNodes[0].Object.ToString(1));
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.GenerateSignalBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.GenerateSignalBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.GenerateSignalBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.GenerateSignalBlock.Clone">
            <summary>
            Clone the block, including the template
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.GenerateSignalBlock.GetAssemblyClassName">
            <summary>
            Gets the name of the class
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.GenerateSignalBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.GenerateSignalBlock.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.GenerateSignalBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.GenerateSignalBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.GenerateSignalBlock.TemplateNameList">
            <summary>
            Available templates
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.GenerateSignalBlock.TemplateName">
            <summary>
            Name of the template to be used (sine, cosine, sawtooth, square, triangle)
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.GenerateSignalBlock.Amplitude">
            <summary>
            Amplitude of the signal. Default value is 1.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.GenerateSignalBlock.Frequency">
            <summary>
            Frequency of the signal in Hz. Default value is 60.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.GenerateSignalBlock.Phase">
            <summary>
            The initial angle of function at its origin. Default value is 0.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.GenerateSignalBlock.Offset">
            <summary>
            Distance from the origin. Default value is 0.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.GenerateSignalBlock.Start">
            <summary>
            Start of the signal in time. Default value is 0.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.GenerateSignalBlock.Finish">
            <summary>
            Finish of the signal in time. Default value is 1.
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.GenerateSignalBlock.SamplingRate">
            <summary>
            Sampling rate used on sampling. Default value is 32768 (32KHz).
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.GenerateSignalBlock.IgnoreLastSample">
            <summary>
            If true, the last sample is not included in the created signal. Default value is false.
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.BlockList">
            <summary>
            Defines a list of blocks
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockList.ExecuteAll">
            <summary>
            Executes all the connected blocks in the list
            </summary>
            <returns></returns>
        </member>
        <member name="T:WaveletStudio.Blocks.BlockInputNode">
            <summary>
            Input node of an block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockInputNode.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockInputNode.#ctor(WaveletStudio.Blocks.BlockBase@,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="root">The block object thar contains this node</param>
            <param name="name">Name of the input</param>
            <param name="shortName">Short name</param>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockInputNode.ConnectTo(WaveletStudio.Blocks.BlockOutputNode)">
            <summary>
            Connect this input node to an output node in other block
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockInputNode.ConnectTo(WaveletStudio.Blocks.BlockOutputNode@)">
            <summary>
            Connect this input node to an output node in other block
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockInputNode.Clone">
            <summary>
            Clones this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockInputNode.CreateSingleInputSignal(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Create a single input node in a block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockInputNode.CreateSingleInput(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Create a single input node in a block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.BlockInputNode.CreateDoubledInput(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Create two default input nodes in a block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.BlockInputNode.Object">
            <summary>
            
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.ScalarOperationBlock">
            <summary>
            <para>Executes a scalar operation in a signal (sum, subtraction, multiplication and division).</para>
            <para>The operation is made sample-by-sample.</para>
            <para>Image: http://i.imgur.com/gC28gvP.png</para>
            <para>InOutGraph: http://i.imgur.com/HE2eGMN.png </para>
            <para>Title: Scalar Operation </para>
            <example>
                <code>
                    var signal = new ImportFromTextBlock { Text = "1, 3, -2, 9, 4.5, -2, 4, 0" };
                    var block = new ScalarOperationBlock
                    {
                        Operation = WaveMath.OperationEnum.Sum,
                        Value = 1.5
                    };
                
                    signal.ConnectTo(block);
                    signal.Execute();
                
                    Console.WriteLine(block.Output[0].ToString(0, ", "));
                    //Console Output:
                    //2.5, 4.5, -0.5, 10.5, 6.0, -0.5, 5.5, 1.5
                </code>
            </example>
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ScalarOperationBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ScalarOperationBlock.CreateNodes(WaveletStudio.Blocks.BlockBase@)">
            <summary>
            Creates the input and output nodes
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:WaveletStudio.Blocks.ScalarOperationBlock.Execute">
            <summary>
            Executes the block
            </summary>
        </member>
        <member name="M:WaveletStudio.Blocks.ScalarOperationBlock.Clone">
            <summary>
            Clones this block
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.ScalarOperationBlock.CloneWithLinks">
            <summary>
            Clones this block but mantains the links
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Blocks.ScalarOperationBlock.GetAssemblyClassName">
            <summary>
            Gets the name of the class
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Blocks.ScalarOperationBlock.Name">
            <summary>
            Name of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ScalarOperationBlock.Description">
            <summary>
            Description of the block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ScalarOperationBlock.ProcessingType">
            <summary>
            Processing type
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ScalarOperationBlock.Operation">
            <summary>
            Math operation to be used
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.ScalarOperationBlock.Value">
            <summary>
            Scalar value
            </summary>
        </member>
        <member name="T:WaveletStudio.Blocks.WaveletBlock">
            <summary>
            Wavelet decomposition block
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.WaveletBlock.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:WaveletStudio.Blocks.WaveletBlock.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="T:WaveletStudio.FFT.ManagedFFT">
            <summary>
            Represent a class that performs real or complex valued Fast Fourier 
            Transforms. Instantiate it and use the FFT or TableFFT methods to 
            compute complex to complex FFTs. Use FFTReal for real to complex 
            FFTs which are much faster than standard FFTs.
            </summary>
        </member>
        <member name="M:WaveletStudio.FFT.ManagedFFT.FFT(System.Double[]@,System.Boolean,WaveletStudio.Functions.ManagedFFTModeEnum)">
            <summary>
            Compute the forward or inverse Fourier Transform of data using the specified mode
            </summary>
            <param name="data">The complex data stored as alternating real and imaginary parts</param>
            <param name="forward">true for a forward transform, false for inverse transform</param>
            <param name="mode">Mode to be used</param>
        </member>
        <member name="M:WaveletStudio.FFT.ManagedFFT.DynamicFFT(System.Double[]@,System.Boolean)">
            <summary>
            Compute the forward or inverse Fourier Transform of data, with 
            data containing complex valued data as alternating real and 
            imaginary parts. The length must be a power of 2.
            </summary>
            <param name="data">The complex data stored as alternating real 
            and imaginary parts</param>
            <param name="forward">true for a forward transform, false for 
            inverse transform</param>
        </member>
        <member name="M:WaveletStudio.FFT.ManagedFFT.TableFFT(System.Double[]@,System.Boolean)">
            <summary>
            Compute the forward or inverse Fourier Transform of data, with data
            containing complex valued data as alternating real and imaginary 
            parts. The length must be a power of 2. This method caches values 
            and should be slightly faster on repeated uses than then FFT method. 
            It is also slightly more accurate.
            </summary>
            <param name="data">The complex data stored as alternating real 
            and imaginary parts</param>
            <param name="forward">true for a forward transform, false for 
            inverse transform</param>
        </member>
        <member name="M:WaveletStudio.FFT.ManagedFFT.RealFFT(System.Double[]@,System.Boolean)">
            <summary>
            Compute the forward or inverse Fourier Transform of data, with 
            data containing real valued data only. The output is complex 
            valued after the first two entries, stored in alternating real 
            and imaginary parts. The first two returned entries are the real 
            parts of the first and last value from the conjugate symmetric 
            output, which are necessarily real. The length must be a power 
            of 2.
            </summary>
            <param name="data">The complex data stored as alternating real 
            and imaginary parts</param>
            <param name="forward">true for a forward transform, false for 
            inverse transform</param>
        </member>
        <member name="M:WaveletStudio.FFT.ManagedFFT.Initialize(System.Int32)">
            <summary>
            Call this with the size before using the TableFFT version
            Fills in tables for speed. Done automatically in TableFFT
            </summary>
            <param name="size">The size of the FFT in samples</param>
        </member>
        <member name="M:WaveletStudio.FFT.ManagedFFT.Reverse(System.Double[]@,System.Int32)">
            <summary>
            Swap data indices whenever index i has binary 
            digits reversed from index j, where data is
            two doubles per index.
            </summary>
            <param name="data"></param>
            <param name="n"></param>
        </member>
        <member name="F:WaveletStudio.FFT.ManagedFFT._cosTable">
            <summary>
            Precomputed cos table for speed
            </summary>
        </member>
        <member name="F:WaveletStudio.FFT.ManagedFFT._sinTable">
            <summary>
            Precomputed sin table for speed
            </summary>
        </member>
        <member name="T:WaveletStudio.Functions.WaveMath">
            <summary>
            Common math and statistical operations
            </summary>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.ExecuteRelationalOperation(WaveletStudio.Functions.WaveMath.RelationalOperatorEnum,System.Double[],System.Double[])">
            <summary>
            Executes a relational operation between two arrays
            </summary>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.ExecuteRelationalOperationWithNextSample(WaveletStudio.Functions.WaveMath.RelationalOperatorEnum,System.Double[])">
            <summary>
            Executes a relational in an array, comparing each sample with the next one
            </summary>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.ExecuteRelationalOperationWithPreviousSample(WaveletStudio.Functions.WaveMath.RelationalOperatorEnum,System.Double[])">
            <summary>
            Executes a relational in an array, comparing each sample with the previous one
            </summary>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.ExecuteRelationalOperation(WaveletStudio.Functions.WaveMath.RelationalOperatorEnum,System.Double[],System.Double)">
            <summary>
            Executes a relational in an array, comparing each sample with the provided static value
            </summary>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.ExecuteRelationalOperation(WaveletStudio.Functions.WaveMath.RelationalOperatorEnum,WaveletStudio.Signal[])">
            <summary>
            Executes a relational operation between two or more signals
            </summary>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.ExecuteRelationalOperation(WaveletStudio.Functions.WaveMath.RelationalOperatorEnum,WaveletStudio.Signal,System.Double)">
            <summary>
            Executes a relational operation between two or more signals
            </summary>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.ExecuteRelationalOperationWithPreviousSample(WaveletStudio.Functions.WaveMath.RelationalOperatorEnum,WaveletStudio.Signal)">
            <summary>
            Executes a relational in a signal, comparing each sample with the previous one
            </summary>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.ExecuteRelationalOperationWithNextSample(WaveletStudio.Functions.WaveMath.RelationalOperatorEnum,WaveletStudio.Signal)">
            <summary>
            Executes a relational in a signal, comparing each sample with the next one
            </summary>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.GetRelationalOperationFunction(WaveletStudio.Functions.WaveMath.RelationalOperatorEnum)">
            <summary>
            Gets the function of specified relational operator
            </summary>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.ExecuteLogicOperation(WaveletStudio.Functions.WaveMath.LogicalOperationEnum,System.Double[],System.Double[])">
            <summary>
            Executes a logical operation between two arrays
            </summary>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.ExecuteLogicOperation(WaveletStudio.Functions.WaveMath.LogicalOperationEnum,WaveletStudio.Signal[])">
            <summary>
            Executes a logical operation between two or more signals
            </summary>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.GetLogicalOperationFunction(WaveletStudio.Functions.WaveMath.LogicalOperationEnum)">
            <summary>
            Gets the function of specified logical operation
            </summary>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Convolve(WaveletStudio.Functions.ConvolutionModeEnum,System.Double[],System.Double[],System.Boolean,System.Int32,WaveletStudio.Functions.ManagedFFTModeEnum)">
            <summary>
            Convolves vectors input and filter.
            </summary>
            <param name="convolutionMode">Defines what convolution function should be used</param> 
            <param name="input">The input signal</param>
            <param name="filter">The filter</param>
            <param name="returnOnlyValid">True to return only the middle of the array</param>
            <param name="margin">Margin to be used if returnOnlyValid is set to true</param>
            <param name="mode">FFT mode</param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.ConvolveNormal(System.Double[],System.Double[],System.Boolean,System.Int32)">
            <summary>
            Convolves vectors input and filter.
            </summary>
            <param name="input">The input signal</param>
            <param name="filter">The filter</param>
            <param name="returnOnlyValid">True to return only the middle of the array</param>
            <param name="margin">Margin to be used if returnOnlyValid is set to true</param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.ConvolveManagedFFT(System.Double[],System.Double[],System.Boolean,System.Int32,WaveletStudio.Functions.ManagedFFTModeEnum)">
            <summary>
            Convolves vectors input and filter using a managed FFT algorithm.
            </summary>
            <param name="input">The input signal</param>
            <param name="filter">The filter</param>
            <param name="returnOnlyValid">True to return only the middle of the array</param>
            <param name="margin">Margin to be used if returnOnlyValid is set to true</param>
            <param name="mode">Mode</param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Interpolate(WaveletStudio.Signal,System.UInt32,WaveletStudio.Functions.InterpolationModeEnum)">
            <summary>
            Performs an interpolation in the specified signal
            </summary>
            <param name="signal"></param>
            <param name="factor"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.InterpolateLinear(WaveletStudio.Signal,System.UInt32)">
            <summary>
            Linear interpolation. Factor must be >= 2
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.InterpolateNearest(WaveletStudio.Signal,System.UInt32)">
            <summary>
            Nearest interpolation. Factor must be >= 2
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.InterpolateCubic(WaveletStudio.Signal,System.UInt32)">
            <summary>
            Cubic interpolation. Factor must be >= 2
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.InterpolatePolynomial(WaveletStudio.Signal,System.UInt32)">
            <summary>
            Interpolation from the Neville's Algorthm. Factor must be >= 2
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.InterpolateNewtonForm(WaveletStudio.Signal,System.UInt32)">
            <summary>
            Interpolation by the Newton Interpolation Polynomial. Factor must be >= 2
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Neville(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Evaluate the polynomial which interpolates a given set of data at a single value of the independent variable using the Neville's algorithm. Based on work by Brian Bradie at tiny.cc/6nbwf
            </summary>
            <param name="n">number of interpolating points</param>
            <param name="x">array containing interpolating points</param>
            <param name="y">array containing function values to be interpolated</param>
            <param name="t">value of independent variable at which the interpolating polynomial is to be evaluated</param>
            <returns>y	value of interpolating polynomial defined by the data in the arrays x and y at the specified value of the independent variable</returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.NewtonDivDiff(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Compute the coefficients of the Newton form of the polynomial which interpolates a given set of data. Based on work by Brian Bradie at tiny.cc/6nbwf       
            </summary>
            <param name="n">number of interpolating points</param>
            <param name="x">array containing interpolating points</param>
            <param name="y">array containing function values to be interpolated</param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.NewtonEval(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Evaluate the Newton form of the polynomial which interpolates a given set of data at a single value of the independent variable given the coefficients of the Newton form (obtained from 'NewtonDivDiff'). Based on work by Brian Bradie at tiny.cc/6nbwf
            </summary>
            <param name="n">number of interpolating points</param>
            <param name="x">array containing interpolating points</param>
            <param name="nf">array containing the coefficients of the Newton form of the interpolating polynomial</param>
            <param name="t">value of independent variable at which the interpolating polynomial is to be evaluated</param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Tridiagonal(System.Int32,System.Collections.Generic.IList{System.Double},System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            Used in interpolation functions
            </summary>
            <param name="n"></param>
            <param name="c"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="r"></param>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.CubicNak(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary> 
            Determine the coefficients for the 'not-a-knot' cubic spline for a given set of data
            </summary>
            <param name="n">number of interpolating points</param>
            <param name="x">array containing interpolating points</param>
            <param name="f">array containing function values to be interpolated</param>
            <param name="b">array of size at least n</param>
            <param name="c">array of size at least n</param>
            <param name="d">array of size at least n</param>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.SplineEval(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Evaluate a cubic spline at a single value of the independent variable given the coefficients of the cubic spline interpolant (obtained from 'CubicNak' or 'CubicClamped')
            </summary>
            <param name="n">number of interpolating points</param>
            <param name="x">array containing interpolating points</param>
            <param name="f">array containing the constant terms from the cubic spline</param>
            <param name="b">array containing the coefficients of the linear terms from the cubic spline</param>
            <param name="c">array containing the coefficients of the quadratic terms from the cubic spline</param>
            <param name="d">array containing the coefficients of the cubic terms from the cubic spline</param>
            <param name="t">value of independent variable at which the interpolating polynomial is to be evaluated</param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Add(System.Double[],System.Double[])">
            <summary>
            Add two arrays
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Add(System.Double[],System.Double)">
            <summary>
            Sum all the samples in an array with a scalar value
            </summary>
            <param name="array"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Subtract(System.Double[],System.Double[])">
            <summary>
            Subtract two arrays
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Subtract(System.Double[],System.Double)">
            <summary>
            Subtract all the samples in an array by a scalar value
            </summary>
            <param name="array"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Multiply(System.Double[],System.Double[])">
            <summary>
            Multiply two arrays
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Multiply(System.Double[],System.Double)">
            <summary>
            Multiplies an array by a scalar value
            </summary>
            <param name="array"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Divide(System.Double[],System.Double[])">
            <summary>
            Divide an array by other
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Divide(System.Double[],System.Double)">
            <summary>
            Divides an array by a scalar value
            </summary>
            <param name="array"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.SubArray(System.Double[],System.Int32)">
            <summary>
            Gets a subarrar with the specified length
            </summary>
            <param name="array"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.ExecuteOperation(WaveletStudio.Functions.WaveMath.OperationEnum,WaveletStudio.Signal[])">
            <summary>
            Executes an operation between two or more signals
            </summary>
            <param name="operation"></param>
            <param name="signals"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.GetOperationFunction(WaveletStudio.Functions.WaveMath.OperationEnum)">
            <summary>
            Gets the function of specified operation
            </summary>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.GetScalarOperationFunction(WaveletStudio.Functions.WaveMath.OperationEnum)">
            <summary>
            Gets the function of specified scalar operation
            </summary>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.GetOperationSymbol(WaveletStudio.Functions.WaveMath.OperationEnum)">
            <summary>
            Gets the symbol of the specified operation
            </summary>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Switch(System.Double[],System.Double[],System.Double[],WaveletStudio.Functions.WaveMath.SwitchCriteriaEnum)">
            <summary>
            Switch output between first input A and B based on threshold value.
            </summary>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Switch(System.Double[],System.Double[],System.Double,WaveletStudio.Functions.WaveMath.SwitchCriteriaEnum)">
            <summary>
            Switch output between first input A and B based on threshold value.
            </summary>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Switch(System.Double,System.Double,System.Double,WaveletStudio.Functions.WaveMath.SwitchCriteriaEnum)">
            <summary>
            Switch output between first input A and B based on threshold value.
            </summary>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.GetAccumulatedEnergy(System.Double[])">
            <summary>
            Gets the accumulated energy of a signal
            </summary>
            <param name="samples"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.GetEnergy(System.Double)">
            <summary>
            Gets the energy of a sample
            </summary>
            <param name="sample"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Mode(System.Double[])">
            <summary>
            Calculates the mode of an array
            </summary>
            <param name="samples"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Mean(System.Double[])">
            <summary>
            Calculates the mean of an array
            </summary>
            <param name="samples"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.NormalDistribution(System.Double[],System.Double,System.Double)">
            <summary>
            Calculates the normal (or Gaussian) distribution of an array
            </summary>
            <param name="x"></param>
            <param name="mean"></param>
            <param name="deviation"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.ProbabilityDensityFunction(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the Probability Density Function value of a sample
            </summary>
            <param name="x"></param>
            <param name="mean"></param>
            <param name="variance"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.NormalDensity(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the normal density of a sample
            </summary>
            <param name="x"></param>
            <param name="mean"></param>
            <param name="deviation"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.StandardDeviation(System.Double[])">
            <summary>
            Calculates the standard deviation of an array of samples
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Abs(WaveletStudio.Signal@,System.Double[])">
            <summary>
            Calculates the absolute value of a signal
            </summary>
            <param name="signal"></param>
            <param name="samples"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Abs(System.Double[])">
            <summary>
            Calculates the absolute value of an array
            </summary>
            <param name="samples"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.AbsFromComplex(System.Double[])">
            <summary>
            Calculates the absolute value of a complex array
            </summary>
            <param name="samples"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.AbsFromComplex(System.Double[],System.Int32,System.Int32)">
            <summary>
            Calculates the absolute value of a complex array
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Normalize(System.Double[],System.Int32)">
            <summary>
            Normalize an array dividing each sample by the array length
            </summary>
            <param name="samples"></param>
            <param name="samplesLength"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.UniqueSorted(System.Double[])">
            <summary>
            Sort and removes the repeated values in an array
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Scale(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Scales a number based in its minimun and maximum
            </summary>
            <param name="x"></param>
            <param name="currentMin"></param>
            <param name="currentMax"></param>
            <param name="newMin"></param>
            <param name="newMax"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Scale(WaveletStudio.Signal,System.Double,System.Double)">
            <summary>
            Scales a signal
            </summary>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.DownSample(System.Double[],System.Int32,System.Boolean)">
            <summary>
            Decreases the sampling rate of the input by keeping every odd sample starting with the first sample.
            </summary>
            <param name="input"></param>
            <param name="factor"></param>
            <param name="invert"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.UpSample(System.Double[],System.Int32,System.Boolean)">
            <summary>
            Increases the sampling rate of the input by inserting n-1 zeros between samples. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Shift(WaveletStudio.Signal@,System.Double)">
            <summary>
            Shift signal
            </summary>
            <param name="signal"></param>
            <param name="delay"></param>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Invert(System.Double[])">
            <summary>
            Invert an array
            </summary>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.IsPowerOf2(System.Int32)">
            <summary>
            Returns true if the value of parameter x is a power of 2
            </summary>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Repeat(WaveletStudio.Signal,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Repeat samples
            </summary>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.Repeat(System.Double[],System.UInt32,System.UInt32)">
            <summary>
            Repeat samples
            </summary>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.LimitRange(System.Double,System.Double,System.Double)">
            <summary>
            Limits the range of a number by the maximun and minimun values
            </summary>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.ToString(System.Collections.Generic.List{WaveletStudio.Signal},System.Int32)">
            <summary>
            Gets all the samples of the signal separated with a space
            </summary>
            <param name="signalList"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Functions.WaveMath.ToString(System.Collections.Generic.List{WaveletStudio.Signal},System.Int32,System.String)">
            <summary>
            Gets all the samples of the signal separated with the specified separator
            </summary>
            <param name="signalList"></param>
            <param name="precision"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="T:WaveletStudio.Functions.WaveMath.RelationalOperatorEnum">
            <summary>
            Relational Operators
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.WaveMath.RelationalOperatorEnum.GreaterThan">
            <summary>
            &gt;
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.WaveMath.RelationalOperatorEnum.LessThan">
            <summary>
            &lt;
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.WaveMath.RelationalOperatorEnum.GreaterOrEqualsThan">
            <summary>
            &gt;=
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.WaveMath.RelationalOperatorEnum.LessOrEqualsThan">
            <summary>
            &lt;=
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.WaveMath.RelationalOperatorEnum.EqualsTo">
            <summary>
            =
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.WaveMath.RelationalOperatorEnum.NotEqualsTo">
            <summary>
            !=
            </summary>
        </member>
        <member name="T:WaveletStudio.Functions.WaveMath.LogicalOperationEnum">
            <summary>
            Logical Operation
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:WaveletStudio.Functions.WaveMath.LogicalOperationEnum.And" -->
        <member name="F:WaveletStudio.Functions.WaveMath.LogicalOperationEnum.Or">
            <summary>
            Or (||)
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.WaveMath.LogicalOperationEnum.Xor">
            <summary>
            Xor (^)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:WaveletStudio.Functions.WaveMath.LogicalOperationEnum.NotAnd" -->
        <member name="F:WaveletStudio.Functions.WaveMath.LogicalOperationEnum.NotOr">
            <summary>
            Not Or (!||)
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.WaveMath.LogicalOperationEnum.NotXor">
            <summary>
            Not Xor (!^)
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.WaveMath.LogicalOperationEnum.Not">
            <summary>
            Not (!)
            </summary>
        </member>
        <member name="T:WaveletStudio.Functions.WaveMath.OperationEnum">
            <summary>
            Operation
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.WaveMath.OperationEnum.Multiply">
            <summary>
            Multiply
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.WaveMath.OperationEnum.Sum">
            <summary>
            Sum
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.WaveMath.OperationEnum.Subtract">
            <summary>
            Subtract
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.WaveMath.OperationEnum.Divide">
            <summary>
            Divide
            </summary>
        </member>
        <member name="T:WaveletStudio.Functions.WaveMath.SwitchCriteriaEnum">
            <summary>
            Switch operation criteria enum
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.WaveMath.SwitchCriteriaEnum.BIsGreaterThanThreshold">
            <summary>
            Select B when B &gt; threshold, otherwise select A
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.WaveMath.SwitchCriteriaEnum.BIsLessThanThreshold">
            <summary>
            Select B when B &lt; threshold, otherwise select A
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.WaveMath.SwitchCriteriaEnum.BIsGreaterOrEqualsThanThreshold">
            <summary>
            Select B when B &gt;= threshold, otherwise select A
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.WaveMath.SwitchCriteriaEnum.BIsLessOrEqualsThanThreshold">
            <summary>
            Select B when B &lt;= threshold, otherwise select A
            </summary>
        </member>
        <member name="T:WaveletStudio.Functions.ConvolutionModeEnum">
            <summary>
            Convolution mode
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.ConvolutionModeEnum.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.ConvolutionModeEnum.ManagedFFT">
            <summary>
            FFT with the managed library
            </summary>
        </member>
        <member name="T:WaveletStudio.Functions.InterpolationModeEnum">
            <summary>
            Interpolation mode
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.InterpolationModeEnum.Linear">
            <summary>
            Linear interpolation
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.InterpolationModeEnum.Nearest">
            <summary>
            Nearest neighbour interpolation
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.InterpolationModeEnum.Cubic">
            <summary>
            Cubic interpolation (spline)
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.InterpolationModeEnum.Polynomial">
            <summary>
            Polynomial interpolation using the Neville's Algorithm
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.InterpolationModeEnum.NewtonForm">
            <summary>
            Newton form of polynomial interpolation
            </summary>
        </member>
        <member name="T:WaveletStudio.MemoryPool">
            <summary>
            Memory pool serving as temporary storage for System.Array objects.
            Based in the ILNumerics Memory Pool.
            </summary>
            <remarks>The pool reduces the pressure on the systems memory done by larger objects.
            <para>Arrays created in ILNumerics.Net will try to reclaim its memory from this pool. If attempt fails, the memory is gathered from the managed heap normally.</para>
            <para>Disposed array objects register their underlying System.Array in the pool for later reusing. The process is triggered by the garbage collector or by the user calling the Dispose function available for all array objects.</para></remarks>
        </member>
        <member name="F:WaveletStudio.MemoryPool.Pool">
            <summary>
            The only global ILMemoryPool instance
            </summary>
        </member>
        <member name="M:WaveletStudio.MemoryPool.Reset(System.Int32,System.Int32)">
            <summary>
            Reset and reconfigure the pool 
            </summary>
            <param name="minArrayLength">Minimum length for array object to be stored inside the pool</param>
            <param name="poolSizeMb">Overall size the memory pool consumes at most</param>
            <remarks>Reset will dispose all objects currently hold in the pool!</remarks>
        </member>
        <member name="M:WaveletStudio.MemoryPool.DisposeContent">
            <summary>
            Dispose all object currently hold in the pool 
            </summary>
            <remarks>The pool get cleared and continues working with the same parameters after the call has finished. </remarks>
        </member>
        <member name="M:WaveletStudio.MemoryPool.RegisterObject``1(``0[])">
            <summary>
            Register an array object of value type in the pool
            </summary>
            <typeparam name="T">value type</typeparam>
            <param name="arr">value type array</param>
            <remarks><para>In order to be stored in the pool, the array must meet the minimum array length and must fit into the global pool size.
            Null objects or empty arrays or array not suitable for the pool will be silently ignored.</para>
            <para>If the new array is too large to fit into the remaining pool space, the oldest objects in the pool will be released until the object can get registered.</para></remarks>
        </member>
        <member name="M:WaveletStudio.MemoryPool.New``1(System.Int32)">
            <summary>
            Request a System.Array instance
            </summary>
            <typeparam name="T">value type</typeparam>
            <param name="length">length of array</param>
            <returns>System.Array - either from the pool or a newly created array</returns>
            <remarks><para>If a suitable System.Array was found in the pool, this object is returned. Otherwise a new array is created.</para>
            <para>There is no way of determining, if the array was recalimed from pool or newly created! If you must be sure, the element values are set to default(T), call the overloaded version <see cref="M:WaveletStudio.MemoryPool.New``1(System.Int32,System.Boolean,System.Boolean@)"/> instead!</para>
            <para>If a new array could not get created due to an OutOfMemoryException, a garbage collection is triggered and the array is again requested from the pool. If this failes again, another attempt to create the array is done. Exceptions may thrown from this last attempt are not catched and transported back to the callee.</para></remarks>
        </member>
        <member name="M:WaveletStudio.MemoryPool.New``1(System.Int32,System.Boolean)">
            <summary>
            Request a System.Array instance and optionally clear the array
            </summary>
            <typeparam name="T">value type</typeparam>
            <param name="length">length of array</param>
            <param name="clear">if true, the elements of the array returned are set to default(T).</param>
            <returns>System.Array - either from the pool or a newly created array</returns>
            <remarks><para>If a suitable System.Array was found in the pool, this object is returned. Otherwise a new array is created.</para>
            <para>If the <paramref name="clear">clear </paramref> parameter was set to false, the iscleared parameter can be used to determine, if the object was returnd from the pool and may need extra clearing.</para>
            <para>If a new array could not get created due to an OutOfMemoryException, a garbage collection is triggered and the array is again requested from the pool. If this failes again, another attempt to create the array is done. Exceptions eventually thrown from this last attempt are not catched and transported back to the callee.</para></remarks>
        </member>
        <member name="M:WaveletStudio.MemoryPool.New``1(System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            Request a System.Array instance and optionally clear the array
            </summary>
            <typeparam name="T">value type</typeparam>
            <param name="length">length of array</param>
            <param name="clear">if true, the elements of the array returned are set to default(T).</param>
            <param name="iscleared">out paramater determining if the array returned has been cleared</param>
            <returns>System.Array - either from the pool or a newly created array</returns>
            <remarks><para>If a suitable System.Array was found in the pool, this object is returned. Otherwise a new array is created.</para>
            <para>If the <paramref name="clear">clear </paramref> parameter was set to false, the <paramref name="iscleared">iscleared</paramref> parameter can be used to determine, if the object was returnd from the pool and may need extra clearing.</para>
            <para>If a new array could not get created due to an OutOfMemoryException, a garbage collection is triggered and the array is again requested from the pool. If this failes again, another attempt to create the array is done. Exceptions eventually thrown from this last attempt are not catched and transported back to the callee.</para></remarks>
        </member>
        <member name="M:WaveletStudio.MemoryPool.Info(System.Boolean,System.Boolean)">
            <summary>
            Give infos about pool state, optionally reset counters
            </summary>
            <param name="shortVersion">true: abbreviate infos to: current MB in Pool, reclaimed MB for livetime, reclaimed objects for livetime. False: give full info (see below)</param>
            <param name="reset">true: reset internal counter for reclaimed objects/ - bytes</param>
            <returns>infos about current pool state</returns>
        </member>
        <member name="M:WaveletStudio.MemoryPool.Info">
            <summary>
            Give extended infos about pool state
            </summary>
            <returns>Full info about current and reclaimed pool objects</returns>
            <remarks>For short version infos use the overloaded version <see cref="M:WaveletStudio.MemoryPool.Info(System.Boolean)"/></remarks>
        </member>
        <member name="M:WaveletStudio.MemoryPool.Info(System.Boolean)">
            <summary>
            Give infos about pool state, optionally reset counters
            </summary>
            <param name="shortVersion">true: abbreviate infos to: current MB in Pool, reclaimed MB for livetime, reclaimed objects for livetime. False: give full info (see below)</param>
            <returns>infos about current pool state</returns>
        </member>
        <member name="M:WaveletStudio.MemoryPool.Collect(System.Int32)">
            <summary>
            Collect all pending objects waiting for garbage cleaning and finalization
            </summary>
            <param name="generations">collect objects of given generations number only</param>
            <remarks>This function will return, if a garbage collector run and all subsequent finalizers has been completed.
            <para>After the function returns, all pending arrays not referenced from anywhere will have been placed into the pool for reusement.</para></remarks>
        </member>
        <member name="M:WaveletStudio.MemoryPool.Collect">
            <summary>
            Collect all pending objects waiting for garbage cleaning and finalization
            </summary>
            <remarks>This function will return, if a garbage collector run and all subsequent 
            finalizers has been completed.
            <para>After the function returns, all pending arrays not referenced from anywhere will have been placed 
            into the pool for reusement. Therefore this function should only be called, 
            in order to prepare the pool directly <b>before</b> requesting large amounts of memory. 
            </para></remarks>
        </member>
        <member name="P:WaveletStudio.MemoryPool.ReclaimedBytesCount">
            <summary>
            Number of reclaimed bytes since the pool exists
            </summary>
            <remarks>The counter will be reset by calls to</remarks>
        </member>
        <member name="P:WaveletStudio.MemoryPool.ReclaimedObjectsCount">
            <summary>
            Number of reclaimed objects since the pool exists
            </summary>
            <remarks>The counter will be reset by calls to</remarks>
        </member>
        <member name="T:WaveletStudio.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Absolute">
            <summary>
              Looks up a localized string similar to Absolute.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.AbsoluteDescription">
            <summary>
              Looks up a localized string similar to Absolute value of a signal..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.AbsoluteValue">
            <summary>
              Looks up a localized string similar to Absolute Value.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.All">
            <summary>
              Looks up a localized string similar to All.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Amplitude">
            <summary>
              Looks up a localized string similar to Amplitude.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.AmplitudeDescription">
            <summary>
              Looks up a localized string similar to Amplitude of the signal..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.AmplitudeScalingFactor">
            <summary>
              Looks up a localized string similar to Amplitude scaling factor.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.AmplitudeScalingFactorDescription">
            <summary>
              Looks up a localized string similar to Factor to be used in amplitude scaling. If the value is setted to 1, no scaling will be applied to the amplitude variable..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Approximation">
            <summary>
              Looks up a localized string similar to Approximation.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ApproximationLevel">
            <summary>
              Looks up a localized string similar to Approximation Level.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Binary">
            <summary>
              Looks up a localized string similar to Binary.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ColumnSeparator">
            <summary>
              Looks up a localized string similar to Column separator.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ColumnSeparatorDescription">
            <summary>
              Looks up a localized string similar to Column separator value (, |, etc)..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Convolution">
            <summary>
              Looks up a localized string similar to Convolution.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ConvolutionDescription">
            <summary>
              Looks up a localized string similar to Compute convolution of two inputs.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.convolutionmode">
            <summary>
              Looks up a localized string similar to Convolution Mode.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Cosine">
            <summary>
              Looks up a localized string similar to Cosine.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.DecimalPlaces">
            <summary>
              Looks up a localized string similar to Decimal Places.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.DecimalPlacesDescription">
            <summary>
              Looks up a localized string similar to Number of decimal places..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Delay">
            <summary>
              Looks up a localized string similar to Delay.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.DelayDescription">
            <summary>
              Looks up a localized string similar to Time delay..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.DemuxDescription">
            <summary>
              Looks up a localized string similar to Extract and output elements of vector signal..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Details">
            <summary>
              Looks up a localized string similar to Details.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.DetailsLevel">
            <summary>
              Looks up a localized string similar to Details Level.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Divide">
            <summary>
              Looks up a localized string similar to Divide.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Downsample">
            <summary>
              Looks up a localized string similar to Downsample.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.DownsampleDescription">
            <summary>
              Looks up a localized string similar to Decreases the sampling rate of the input by keeping every odd sample starting with the first sample..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.DWTDescription">
            <summary>
              Looks up a localized string similar to Wavelet decomposition block.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.dynamictrigonometricvalues">
            <summary>
              Looks up a localized string similar to Dynamic (slower, uses less memory).
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.EqualsTo">
            <summary>
              Looks up a localized string similar to S1 = S2.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.errorinvalidoriginalsignal">
             <summary>
               Looks up a localized string similar to Before performing any operation is necessary to select a source. 
            Click in the Signal tab and select a signal source..
             </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ExportToCSV">
            <summary>
              Looks up a localized string similar to Export CSV.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ExportToCSVDescription">
            <summary>
              Looks up a localized string similar to Exports a signal to a CSV file.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Extend">
            <summary>
              Looks up a localized string similar to Extend.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ExtendDescription">
            <summary>
              Looks up a localized string similar to Extends a signal using the specified mode.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ExtensionMode">
            <summary>
              Looks up a localized string similar to Extension Mode.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ExtensionModeDescription">
            <summary>
              Looks up a localized string similar to Defines how the signal should be extended during the transform..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ExtensionSize">
            <summary>
              Looks up a localized string similar to Extension Size.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ExtensionSizeDescription">
            <summary>
              Looks up a localized string similar to Extension size (0 to use next power of 2)..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Factor">
            <summary>
              Looks up a localized string similar to Factor.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.FactorDescription">
            <summary>
              Looks up a localized string similar to Factor used in the operation..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.FFT">
            <summary>
              Looks up a localized string similar to FFT.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.FFTDescription">
            <summary>
              Looks up a localized string similar to Compute fast Fourier transform (FFT) of input..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.FFTMode">
            <summary>
              Looks up a localized string similar to FFT Mode.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.FFTModeDescription">
            <summary>
              Looks up a localized string similar to The FFT mode to be used on convolution..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.FilePath">
            <summary>
              Looks up a localized string similar to File.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.FilePathDescription">
            <summary>
              Looks up a localized string similar to Absolute or relative path to the file..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Finish">
            <summary>
              Looks up a localized string similar to Finish Time.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.FinishDescription">
            <summary>
              Looks up a localized string similar to Signal finish time..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.FrameSize">
            <summary>
              Looks up a localized string similar to Frame Size.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.FrameSizeDescription">
            <summary>
              Looks up a localized string similar to The frame size used in the block..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Frequency">
            <summary>
              Looks up a localized string similar to Frequency (Hz).
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.FrequencyDescription">
            <summary>
              Looks up a localized string similar to Frequency used in the block..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.GreaterOrEqualsThan">
            <summary>
              Looks up a localized string similar to S1 &gt;= S2.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.GreaterThan">
            <summary>
              Looks up a localized string similar to S1 &gt; S2.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.IDWTDescription">
            <summary>
              Looks up a localized string similar to Inverse Wavelet Decomposition (IDWT) block..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.IFFTDescription">
            <summary>
              Looks up a localized string similar to Compute inverse fast Fourier transform (IFFT) of input..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.IgnoreFirstRow">
            <summary>
              Looks up a localized string similar to Ignore first row.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.IgnoreFirstRowDescription">
            <summary>
              Looks up a localized string similar to Ignore first row when reading the file..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.IgnoreLastSample">
            <summary>
              Looks up a localized string similar to Ignore the last sample.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.IgnoreLastSampleDescription">
            <summary>
              Looks up a localized string similar to Defines whether the last sample will be included in signal..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ImportFromCSV">
            <summary>
              Looks up a localized string similar to Import CSV.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ImportFromCSVDescription">
            <summary>
              Looks up a localized string similar to Generates a signal based on a CSV file..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.In">
            <summary>
              Looks up a localized string similar to In.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.IncludeSignalNameInFirstColumn">
            <summary>
              Looks up a localized string similar to Include Signal Name in First Column.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.IncludeSignalNameInFirstColumnDescription">
            <summary>
              Looks up a localized string similar to If true, the block includes the signal name in first column..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Input">
            <summary>
              Looks up a localized string similar to Input.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.InputCount">
            <summary>
              Looks up a localized string similar to Number of Inputs.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.InputCountDescription">
            <summary>
              Looks up a localized string similar to Number of inputs of the block..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Interpolate">
            <summary>
              Looks up a localized string similar to Interpolate.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.InterpolateDescription">
            <summary>
              Looks up a localized string similar to Performs an interpolation in a signal.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Invert">
            <summary>
              Looks up a localized string similar to Invert.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.InvertDescription">
            <summary>
              Looks up a localized string similar to Invert a signal..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.KeepSamplingRate">
            <summary>
              Looks up a localized string similar to Keep Sampling Rate.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.KeepSamplingRateDescription">
            <summary>
              Looks up a localized string similar to If true, keeps the original sampling rate, changing the signal start and finish times..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.LessOrEqualsThan">
            <summary>
              Looks up a localized string similar to S1 &lt;= S2.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.LessThan">
            <summary>
              Looks up a localized string similar to S1 &lt; S2.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Level">
            <summary>
              Looks up a localized string similar to Level.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.LevelDescription">
            <summary>
              Looks up a localized string similar to Number of levels to decompose..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Line">
            <summary>
              Looks up a localized string similar to Line.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.LogicAnd">
            <summary>
              Looks up a localized string similar to And.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.LogicNot">
            <summary>
              Looks up a localized string similar to Not.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.LogicNotAnd">
            <summary>
              Looks up a localized string similar to Not And.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.LogicNotOr">
            <summary>
              Looks up a localized string similar to Not Or.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.LogicNotXor">
            <summary>
              Looks up a localized string similar to Not Xor.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.LogicOperation">
            <summary>
              Looks up a localized string similar to Logic Port.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.LogicOperationBlockDescription">
            <summary>
              Looks up a localized string similar to Point-by-point logic operators (AND, OR, NAND, NOR, XOR, NXOR, NOT)..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.LogicOperator">
            <summary>
              Looks up a localized string similar to {0} Operator.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.LogicOr">
            <summary>
              Looks up a localized string similar to Or.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.LogicXor">
            <summary>
              Looks up a localized string similar to Xor.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Mean">
            <summary>
              Looks up a localized string similar to Mean.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.MeanDescription">
            <summary>
              Looks up a localized string similar to Mean value used in the block..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Mode">
            <summary>
              Looks up a localized string similar to Mode.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ModeDescription">
            <summary>
              Looks up a localized string similar to Mode used in the block..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Multiply">
            <summary>
              Looks up a localized string similar to Multiply.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.MuxDescription">
            <summary>
              Looks up a localized string similar to Extract and output elements of vector signal..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.NormalDescription">
            <summary>
              Looks up a localized string similar to Gets the normal distribution of a signal..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.NotEqualsTo">
            <summary>
              Looks up a localized string similar to S1 &lt;&gt; S2.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Offset">
            <summary>
              Looks up a localized string similar to Offset.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.OffsetDescription">
            <summary>
              Looks up a localized string similar to Distance from the origin..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Operand">
            <summary>
              Looks up a localized string similar to Operand.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.OperandDescription">
            <summary>
              Looks up a localized string similar to Operand type to be used by the block..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Operation">
            <summary>
              Looks up a localized string similar to Operation.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.OperationBlockDescription">
            <summary>
              Looks up a localized string similar to Sum, subtract, multiply or divide two signals..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.OperationDescription">
            <summary>
              Looks up a localized string similar to Math operation used in the block..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Out">
            <summary>
              Looks up a localized string similar to Out.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Output">
            <summary>
              Looks up a localized string similar to Output.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.OutputCount">
            <summary>
              Looks up a localized string similar to Number of Outputs.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.OutputCountDescription">
            <summary>
              Looks up a localized string similar to Number of outputs of the block..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Phase">
            <summary>
              Looks up a localized string similar to Phase.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.PhaseDescription">
            <summary>
              Looks up a localized string similar to Phase used in the block..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ProcessingType">
            <summary>
              Looks up a localized string similar to Processing Type.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ProcessingTypeDescription">
            <summary>
              Looks up a localized string similar to Type of action done by the block..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Ramp">
            <summary>
              Looks up a localized string similar to Ramp.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.RampDescription">
            <summary>
              Looks up a localized string similar to Generates a Ramp Function.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.RampFinish">
            <summary>
              Looks up a localized string similar to Ramp Finish.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.RampFinishDescription">
            <summary>
              Looks up a localized string similar to Finish of the ramp in time..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.RampStart">
            <summary>
              Looks up a localized string similar to Ramp Start.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.RampStartDescription">
            <summary>
              Looks up a localized string similar to Ramp start time..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Reconstruction">
            <summary>
              Looks up a localized string similar to Reconstruction.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.RelationalOperator">
            <summary>
              Looks up a localized string similar to Relational.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.RelationalOperatorDescription">
            <summary>
              Looks up a localized string similar to Conversion to boolean based on &gt;, &lt;, &gt;=, &lt;=, &lt;&gt;, = an static value, the previous sample or the next sample..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Repeat">
            <summary>
              Looks up a localized string similar to Repeat.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.RepeatDescription">
            <summary>
              Looks up a localized string similar to Repeats parts of a signal..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.RepetitionCount">
            <summary>
              Looks up a localized string similar to Repetition Count.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.RepetitionCountDescription">
            <summary>
              Looks up a localized string similar to The repetition count used in the block..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Rescale">
            <summary>
              Looks up a localized string similar to Rescale.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.RescaleDescription">
            <summary>
              Looks up a localized string similar to Rescale outputs in the &quot;ALL&quot; output to the original signal size, reverting the downsample and extension effects. Warning: the &quot;ALL&quot; output will be modified, and the signal in this output cannot be reconstructed. Default value is false..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ReturnOnlyValid">
            <summary>
              Looks up a localized string similar to Return only valid samples.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ReturnOnlyValidDescription">
            <summary>
              Looks up a localized string similar to If true, the block will return only the central part of the convolution resulting in a new signal with (S – F + 1) samples (S = size of signal, F = size of filter). If false, all the convolution will returned and resulting in a new signal with (S + F – 1) samples. Default value is false..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ReturnToZero">
            <summary>
              Looks up a localized string similar to Return to Zero.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ReturnToZeroDescription">
            <summary>
              Looks up a localized string similar to Return value to zero in the end..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.SamplingInterval">
            <summary>
              Looks up a localized string similar to Sample time interval.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.SamplingIntervalDescription">
            <summary>
              Looks up a localized string similar to Sample time interval used in the block..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.SamplingRate">
            <summary>
              Looks up a localized string similar to Sampling Rate (Hz).
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.SamplingRateDescription">
            <summary>
              Looks up a localized string similar to Sampling rate used on sampling..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Sawtooth">
            <summary>
              Looks up a localized string similar to Sawtooth.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Scalar">
            <summary>
              Looks up a localized string similar to Scalar.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ScalarDescription">
            <summary>
              Looks up a localized string similar to Multiply, add or subtract or divide the samples of a signal by a scalar number..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.scalaroperation_text">
            <summary>
              Looks up a localized string similar to Scalar.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ScalarValue">
            <summary>
              Looks up a localized string similar to Scalar Value.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ScalarValueDescription">
            <summary>
              Looks up a localized string similar to Value used if Operand property is set to Scalar..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Scale">
            <summary>
              Looks up a localized string similar to Scale.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ScaleDescription">
            <summary>
              Looks up a localized string similar to Compresses or dilates a signal by multiplying the time and/or amplitude by a factor..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Shift">
            <summary>
              Looks up a localized string similar to Shift.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ShiftDescription">
            <summary>
              Looks up a localized string similar to Shift signal..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Signal">
            <summary>
              Looks up a localized string similar to Signal.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.SignalIndexes">
            <summary>
              Looks up a localized string similar to Signal Indexes.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.SignalIndexesDescription">
            <summary>
              Looks up a localized string similar to Indexes of the signals to be copied in the output. One line per output, separated with commas (,)..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.SignalNameInFirstColumn">
            <summary>
              Looks up a localized string similar to First column contains signal name.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.SignalNameInFirstColumnDescription">
            <summary>
              Looks up a localized string similar to If true, the first column contains the name of the signal..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.SignalNames">
            <summary>
              Looks up a localized string similar to Signal Names.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.SignalNamesDescription">
            <summary>
              Looks up a localized string similar to Signal names used in the output (optional, one per line)..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.SignalStart">
            <summary>
              Looks up a localized string similar to Signal Start.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.SignalStartDescription">
            <summary>
              Looks up a localized string similar to Signal start time..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.signaltemplates">
            <summary>
              Looks up a localized string similar to Signal Templates.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Sine">
            <summary>
              Looks up a localized string similar to Sine.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.SortSamples">
            <summary>
              Looks up a localized string similar to Sort Samples.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.SortSamplesDescription">
            <summary>
              Looks up a localized string similar to If true, the block will sort the samples before execute..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Square">
            <summary>
              Looks up a localized string similar to Square.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.StandardDeviation">
            <summary>
              Looks up a localized string similar to Standard Deviation.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.StandardDeviationDescription">
            <summary>
              Looks up a localized string similar to Standard deviation value used in the block..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Start">
            <summary>
              Looks up a localized string similar to Start Time.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.StartDescription">
            <summary>
              Looks up a localized string similar to Signal start time..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.StaticThreshold">
            <summary>
              Looks up a localized string similar to Static Threshold.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.StaticThresholdDescription">
            <summary>
              Looks up a localized string similar to Assign the switch threshold that determines which input the block passes to the output..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Subtract">
            <summary>
              Looks up a localized string similar to Subtract.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Sum">
            <summary>
              Looks up a localized string similar to Sum.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Switch">
            <summary>
              Looks up a localized string similar to Switch.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.SwitchCriteria">
            <summary>
              Looks up a localized string similar to Switch Criteria.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.SwitchCriteriaDescription">
            <summary>
              Looks up a localized string similar to Criteria for select the output..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.SwitchDescription">
            <summary>
              Looks up a localized string similar to Switch output between first input and third input based on value of second input or the threshold value..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.TemplateName">
            <summary>
              Looks up a localized string similar to Template.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.TemplateNameDescription">
            <summary>
              Looks up a localized string similar to The signal generation template used by the block..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.TemplateNotFound">
            <summary>
              Looks up a localized string similar to The template {0} does not exist..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Text">
            <summary>
              Looks up a localized string similar to Text.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.TextBlockDescription">
            <summary>
              Looks up a localized string similar to Generates a signal based on a text..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.TextDescription">
            <summary>
              Looks up a localized string similar to Text used in the block..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.TimeScalingFactor">
            <summary>
              Looks up a localized string similar to Time scaling factor.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.TimeScalingFactorDescription">
            <summary>
              Looks up a localized string similar to Factor to be used in time scaling. If the value is setted to 1, no scaling will be applied to the time variable..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Triangle">
            <summary>
              Looks up a localized string similar to Triangle.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Unique">
            <summary>
              Looks up a localized string similar to Unique.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.UniqueDescription">
            <summary>
              Looks up a localized string similar to Removes the duplicated samples in a signal..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Upsample">
            <summary>
              Looks up a localized string similar to Upsample.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.UpsampleDescription">
            <summary>
              Looks up a localized string similar to Resample input at higher rate by inserting zeros..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.uselookuptable">
            <summary>
              Looks up a localized string similar to Use trigonometric table (faster).
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.Value">
            <summary>
              Looks up a localized string similar to Value.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.ValueDescription">
            <summary>
              Looks up a localized string similar to Scalar value..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.WaveletDescription">
            <summary>
              Looks up a localized string similar to Wavelet decomposition using the Discreete Wavelet Transform (DWT)..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.WaveletName">
            <summary>
              Looks up a localized string similar to Wavelet Name.
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.WaveletNameDescription">
            <summary>
              Looks up a localized string similar to Wavelet function to be used..
            </summary>
        </member>
        <member name="P:WaveletStudio.Properties.Resources.WaveletNameNotFound">
            <summary>
              Looks up a localized string similar to The wavelet {0} does not exist..
            </summary>
        </member>
        <member name="T:WaveletStudio.SignalGeneration.Binary">
            <summary>
             Create a binary wave: y(x) = 0, 1, 0, 1, 0, 1....
            </summary>
        </member>
        <member name="T:WaveletStudio.SignalGeneration.CommonSignalBase">
            <summary>
            Common signal base
            </summary>
        </member>
        <member name="F:WaveletStudio.SignalGeneration.CommonSignalBase.IgnoreLastSample">
            <summary>
            Defines it the last sample will be included in signal
            </summary>
        </member>
        <member name="M:WaveletStudio.SignalGeneration.CommonSignalBase.ExecuteSampler">
            <summary>
            Executes the sampler
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.SignalGeneration.CommonSignalBase.GetFinish">
            <summary>
            Get the finish of the signal considering the seleccted EndingOption
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.SignalGeneration.CommonSignalBase.GetAssemblyClassName">
            <summary>
            Gets the name of the class
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.SignalGeneration.CommonSignalBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.SignalGeneration.CommonSignalBase.Clone">
            <summary>
            Creates a cloned 
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.SignalGeneration.CommonSignalBase.Name">
            <summary>
            Name of the signal
            </summary>
        </member>
        <member name="P:WaveletStudio.SignalGeneration.CommonSignalBase.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:WaveletStudio.SignalGeneration.CommonSignalBase.Start">
            <summary>
            Start of the signal in time
            </summary>
        </member>
        <member name="P:WaveletStudio.SignalGeneration.CommonSignalBase.Finish">
            <summary>
            Finish of the signal in time
            </summary>
        </member>
        <member name="P:WaveletStudio.SignalGeneration.CommonSignalBase.Amplitude">
            <summary>
            Amplitude of the signal
            </summary>
        </member>
        <member name="P:WaveletStudio.SignalGeneration.CommonSignalBase.Frequency">
            <summary>
            Frequency of the signal
            </summary>
        </member>
        <member name="P:WaveletStudio.SignalGeneration.CommonSignalBase.Phase">
            <summary>
            The initial angle of function at its origin
            </summary>
        </member>
        <member name="P:WaveletStudio.SignalGeneration.CommonSignalBase.Offset">
            <summary>
            Distance from the origin
            </summary>
        </member>
        <member name="P:WaveletStudio.SignalGeneration.CommonSignalBase.SamplingInterval">
            <summary>
            Gets or sets  the interval of samples (1/SamplingRate)
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.SignalGeneration.CommonSignalBase.SamplingRate">
            <summary>
            Sampling rate used on sampling
            </summary>
        </member>
        <member name="M:WaveletStudio.SignalGeneration.Binary.ExecuteSampler">
            <summary>
            Generates the signal
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.SignalGeneration.Binary.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:WaveletStudio.SignalGeneration.Sine">
            <summary>
             Create a signal based on a sinusoid: y(x) = A * sin(2 * PI * (f * x + phi)) + D, where: 
             A   -> Amplitude
             f   -> Frequency
             phi -> Phase
             D   -> Offset
            </summary>  
        </member>
        <member name="M:WaveletStudio.SignalGeneration.Sine.ExecuteSampler">
            <summary>
            Generates the signal
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.SignalGeneration.Sine.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:WaveletStudio.Utils">
            <summary>
            Utils methods
            </summary>
        </member>
        <member name="M:WaveletStudio.Utils.GetTypes(System.String)">
            <summary>
            Gets the types in a namespace
            </summary>
            <param name="namespaceName"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Utils.GetType(System.String)">
            <summary>
            Gets a type based on its fullname
            </summary>
            <param name="fullname"></param>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Utils.AssemblyDirectory">
            <summary>
            Get current directory
            </summary>
        </member>
        <member name="T:WaveletStudio.Wavelet.CommonMotherWavelets">
            <summary>
            Provides common mother wavelets, like Daubechies, Haar, etc.
            </summary>
        </member>
        <member name="M:WaveletStudio.Wavelet.CommonMotherWavelets.GetWaveletFromName(System.String)">
            <summary>
            Gets the Mother Wavelet object base on it name. Returns null if the name is not found.
            </summary>
            <param name="name">The name of the wavelet. Examples: db4, haar, sym2, dmeyer, coif3</param>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Wavelet.CommonMotherWavelets.Wavelets">
            <summary>
            List of wavelets. 
            </summary>
        </member>
        <member name="T:WaveletStudio.Wavelet.DecompositionLevel">
            <summary>
            Used as the return of a DWT operation and as the input of a IDWT operation
            </summary>
        </member>
        <member name="M:WaveletStudio.Wavelet.DecompositionLevel.GetDisturbances(System.Double,System.Int32)">
            <summary>
            Estimates the disturbances in the signal based on the normal distribution of the details coefficients
            </summary>
            <param name="threshold">The higher the threshold, the higher the tolerance in flutuations on energy of the details</param>
            <param name="minimunDistance">Minimun distance between disturbances to consider a new one</param>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Wavelet.DecompositionLevel.Index">
            <summary>
            Level index in DWT
            </summary>
        </member>
        <member name="P:WaveletStudio.Wavelet.DecompositionLevel.Approximation">
            <summary>
            Approximation coefficients
            </summary>
        </member>
        <member name="P:WaveletStudio.Wavelet.DecompositionLevel.Details">
            <summary>
            Detais coefficients
            </summary>
        </member>
        <member name="P:WaveletStudio.Wavelet.DecompositionLevel.Signal">
            <summary>
            Signal from which this level was created
            </summary>
        </member>
        <member name="T:WaveletStudio.Wavelet.DecompositionLevel.Disturbance">
            <summary>
            Single disturbance identified in a signal
            </summary>
        </member>
        <member name="F:WaveletStudio.Wavelet.DecompositionLevel.Disturbance.Start">
            <summary>
            Start of the disturbance in the details level (index of the sample)
            </summary>
        </member>
        <member name="F:WaveletStudio.Wavelet.DecompositionLevel.Disturbance.Finish">
            <summary>
            Finish of the disturbance in the details level (index of the sample)
            </summary>
        </member>
        <member name="F:WaveletStudio.Wavelet.DecompositionLevel.Disturbance.SignalStart">
            <summary>
            Start of the disturbance in the signal (index of the sample)
            </summary>
        </member>
        <member name="F:WaveletStudio.Wavelet.DecompositionLevel.Disturbance.SignalFinish">
            <summary>
            Finish of the disturbance in the signal (index of the sample)
            </summary>
        </member>
        <member name="T:WaveletStudio.SignalGeneration.Sawtooth">
            <summary>
             Create a signal based on a sawtooth wave: y(x) = A * 2*((f*x+phi) - floor((f*x+phi) +0.5)) + D, where: 
             A   -> Amplitude
             f   -> Frequency
             phi -> Phase
             D   -> Offset
            </summary>
        </member>
        <member name="M:WaveletStudio.SignalGeneration.Sawtooth.ExecuteSampler">
            <summary>
            Generates the signal
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.SignalGeneration.Sawtooth.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:WaveletStudio.SignalGeneration.Cosine">
            <summary>
             Create a signal based on a sinusoid: y(x) = A * cos(2 * PI * (f * x + phi)) + D, where: 
             A   -> Amplitude
             f   -> Frequency
             phi -> Phase
             D   -> Offset
            </summary>  
        </member>
        <member name="M:WaveletStudio.SignalGeneration.Cosine.ExecuteSampler">
            <summary>
            Generates the signal
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.SignalGeneration.Cosine.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:WaveletStudio.SignalGeneration.Square">
            <summary>
             Create a signal based on a square wave: y(x) = A * sign(sin(2 * PI * (f*x+phi))) + D, where: 
             A   -> Amplitude
             f   -> Frequency
             phi -> Phase
             D   -> Offset
            </summary>
        </member>
        <member name="M:WaveletStudio.SignalGeneration.Square.ExecuteSampler">
            <summary>
            Generates the signal
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.SignalGeneration.Square.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:WaveletStudio.SignalGeneration.Triangle">
            <summary>
             Create a signal based on a triangle wave: y(x) = A * (1-4*abs(round(t-0.25)-(t-0.25))) + D, where: 
             t   -> (f*x+Phi)
             A   -> Amplitude
             f   -> Frequency
             phi -> Phase
             D   -> Offset
            </summary>
        </member>
        <member name="M:WaveletStudio.SignalGeneration.Triangle.ExecuteSampler">
            <summary>
            Generates the signal
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.SignalGeneration.Triangle.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:WaveletStudio.Functions.ManagedFFTModeEnum">
            <summary>
            FFT Computation mode
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.ManagedFFTModeEnum.UseLookupTable">
            <summary>
            Store the trigonometric values in a table (faster)
            </summary>
        </member>
        <member name="F:WaveletStudio.Functions.ManagedFFTModeEnum.DynamicTrigonometricValues">
            <summary>
            Dynamicaly compute the trigonometric values (use less memory)
            </summary>
        </member>
        <member name="T:WaveletStudio.Signal">
            <summary>
            1-D Signal
            </summary>   
        </member>
        <member name="M:WaveletStudio.Signal.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:WaveletStudio.Signal.#ctor(System.Double[])">
            <summary>
            Aditional constructor, passing an array of double with the samples of the signal
            </summary>
            <param name="samples">The samples of the signal</param>
        </member>
        <member name="M:WaveletStudio.Signal.#ctor(System.Double[],System.Int32)">
            <summary>
            Aditional constructor, passing an array of double with the samples of the signal and the number of samples per second
            </summary>
            <param name="samples">The samples of the signal</param>
            <param name="samplesPerSecond">Quantity of samples per second</param>
        </member>
        <member name="M:WaveletStudio.Signal.LengthIsPowerOf2">
            <summary>
            Informs that size of signal is a power of 2.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Signal.MakeLengthPowerOfTwo">
            <summary>
            Resizes the signal until its length be a power of 2.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Signal.ToString">
            <summary>
            Gets all the samples of the signal separated with a space
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Signal.ToString(System.Int32)">
            <summary>
            Gets all the samples of the signal separated with a space
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Signal.ToString(System.Int32,System.String)">
            <summary>
            Gets all the samples of the signal separated with the separator parameter
            </summary>
            <param name="precision"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Signal.GetSamplesPair">
            <summary>
            Get all the samples in a key value array pair
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Signal.GetTimeSeries">
            <summary>
            Get the time series array
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Signal.Clone">
            <summary>
            Clones the signal, including the samples
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Signal.Copy">
            <summary>
            Clone the signal without cloning the samples
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Signal.Name">
            <summary>
            Name of the signal
            </summary>
        </member>
        <member name="P:WaveletStudio.Signal.Samples">
            <summary>
            Samples of the signal
            </summary>
        </member>
        <member name="P:WaveletStudio.Signal.Item(System.Int32)">
            <summary>
            Returns the value of the sample in the specified index
            </summary>        
            <exception cref="T:System.IndexOutOfRangeException">Throws System.IndexOutOfRangeException if specified index is less than 0 or equals or greater than the number of samples in the signal.</exception>
        </member>
        <member name="P:WaveletStudio.Signal.SamplesCount">
            <summary>
            Gets the number of samples in the signal
            </summary>
        </member>
        <member name="P:WaveletStudio.Signal.IsComplex">
            <summary>
            Complex samples of the signal
            </summary>
        </member>
        <member name="P:WaveletStudio.Signal.Start">
            <summary>
            Start of the signal in the time
            </summary>
        </member>
        <member name="P:WaveletStudio.Signal.Finish">
            <summary>
            Finish od the signal in the time
            </summary>
        </member>
        <member name="P:WaveletStudio.Signal.SamplingInterval">
            <summary>
            Gets or sets  the interval of samples (1/SamplingRate)
            </summary>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Signal.SamplingRate">
            <summary>
            Sampling rate used on sampling
            </summary>
        </member>
        <member name="P:WaveletStudio.Signal.CustomPlot">
            <summary>
            Custom plotting
            </summary>
        </member>
        <member name="T:WaveletStudio.Wavelet.MotherWavelet">
            <summary>
            Mother wavelet base class
            </summary>
        </member>
        <member name="M:WaveletStudio.Wavelet.MotherWavelet.#ctor(System.String,System.Double[])">
            <summary>
            Constructior using the name and the scaling filter
            </summary>
            <param name="name">Name of the mother wavelet</param>
            <param name="scalingFilter">The scaling function of the mother wavelet</param>
        </member>
        <member name="M:WaveletStudio.Wavelet.MotherWavelet.#ctor(System.Double[])">
            <summary>
            Constructior using the name and the scaling filter
            </summary>
            <param name="scalingFilter">The scaling function of the mother wavelet</param>
        </member>
        <member name="M:WaveletStudio.Wavelet.MotherWavelet.CalculateFilters">
            <summary>
            Calculates the reconstruction and decomposition filters 
            </summary>
        </member>
        <member name="M:WaveletStudio.Wavelet.MotherWavelet.LoadFromName(System.String)">
            <summary>
            Loads the mother-wavelet by its name. Just a link to CommonMotherWavelets.GetWaveletFromName.
            </summary>
            <param name="name">Mother-wavelet name</param>
            <returns></returns>
        </member>
        <member name="P:WaveletStudio.Wavelet.MotherWavelet.Name">
            <summary>
            Name of the mother wavelet
            </summary>
        </member>
        <member name="P:WaveletStudio.Wavelet.MotherWavelet.ScalingFilter">
            <summary>
            The scaling function of the mother wavelet, used to calculate the filters
            </summary>
        </member>
        <member name="P:WaveletStudio.Wavelet.MotherWavelet.Filters">
            <summary>
            Decomposition and Reconstruction filters
            </summary>
        </member>
        <member name="T:WaveletStudio.Wavelet.MotherWavelet.FiltersStruct">
            <summary>
            Decomposition and Reconstruction filters base-type
            </summary>
        </member>
        <member name="F:WaveletStudio.Wavelet.MotherWavelet.FiltersStruct.DecompositionLowPassFilter">
            <summary>
            Decomposition Low-pass Filter
            </summary>
        </member>
        <member name="F:WaveletStudio.Wavelet.MotherWavelet.FiltersStruct.DecompositionHighPassFilter">
            <summary>
            Decomposition High-pass Filter
            </summary>
        </member>
        <member name="F:WaveletStudio.Wavelet.MotherWavelet.FiltersStruct.ReconstructionLowPassFilter">
            <summary>
            Reconstruction Low-pass Filter
            </summary>
        </member>
        <member name="F:WaveletStudio.Wavelet.MotherWavelet.FiltersStruct.ReconstructionHighPassFilter">
            <summary>
            Reconstruction High-pass Filter
            </summary>
        </member>
        <member name="T:WaveletStudio.Wavelet.DWT">
            <summary>
            Discreet Wavelet Transform and its inverse
            </summary>
        </member>
        <member name="M:WaveletStudio.Wavelet.DWT.ExecuteDWT(WaveletStudio.Signal,WaveletStudio.Wavelet.MotherWavelet,System.Int32,WaveletStudio.SignalExtension.ExtensionMode,WaveletStudio.Functions.ConvolutionModeEnum)">
            <summary>
            Multilevel 1-D Discreete Wavelet Transform
            </summary>
            <param name="signal">The signal. Example: new Signal(5, 6, 7, 8, 1, 2, 3, 4)</param>
            <param name="motherWavelet">The mother wavelet to be used. Example: CommonMotherWavelets.GetWaveletFromName("DB4")</param>
            <param name="level">The depth-level to perform the DWT</param>
            <param name="extensionMode">Signal extension mode</param>
            <param name="convolutionMode">Defines what convolution function should be used</param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.Wavelet.DWT.ExecuteIDWT(System.Collections.Generic.List{WaveletStudio.Wavelet.DecompositionLevel},WaveletStudio.Wavelet.MotherWavelet,System.Int32,WaveletStudio.Functions.ConvolutionModeEnum)">
            <summary>
            Multilevel inverse discrete 1-D wavelet transform
            </summary>
            <param name="decompositionLevels">The decomposition levels of the DWT</param>
            <param name="motherWavelet">The mother wavelet to be used. Example: CommonMotherWavelets.GetWaveletFromName("DB4") </param>
            <param name="level">The depth-level to perform the DWT</param>
            <param name="convolutionMode">Defines what convolution function should be used</param>
            <returns></returns>
        </member>
        <member name="T:WaveletStudio.SignalExtension">
            <summary>
            Signal extension methods
            </summary>
        </member>
        <member name="M:WaveletStudio.SignalExtension.Extend(WaveletStudio.Signal@,WaveletStudio.SignalExtension.ExtensionMode,System.Int32,System.Int32)">
            <summary>
            Extends a signal using the specified extension mode
            </summary>
            <param name="input">Signal to extend</param>
            <param name="extensionMode">The extension mode</param>
            <param name="beforeSize">The extension size of the left side</param>
            <param name="afterSize">The extension size of right left side</param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.SignalExtension.Extend(System.Double[],WaveletStudio.SignalExtension.ExtensionMode,System.Int32)">
            <summary>
            Extends an array using the specified extension mode
            </summary>
            <param name="input">Array to extend</param>
            <param name="extensionMode">The extension mode</param>
            <param name="extensionSize">The extension size of the left and right sides (each one)</param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.SignalExtension.Extend(System.Double[],WaveletStudio.SignalExtension.ExtensionMode,System.Int32,System.Int32)">
            <summary>
            Extends an array using the specified extension mode
            </summary>
            <param name="input">Array to extend</param>
            <param name="extensionMode">The extension mode</param>
            <param name="beforeSize">The extension size of the left side</param>
            <param name="afterSize">The extension size of right left side</param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.SignalExtension.Deextend(System.Double[],System.Int32)">
            <summary>
            Deextends an array, returning only its middle part
            </summary>
            <param name="input">Array to extend</param>
            <param name="size">The extension size of the left and right sides (each one)</param>
            <returns></returns>
        </member>
        <member name="M:WaveletStudio.SignalExtension.NextPowerOf2(System.Int32)">
            <summary>
            Gets the next power of 2 of an number
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="T:WaveletStudio.SignalExtension.ExtensionMode">
            <summary>
            Extension modes
            </summary>
        </member>
        <member name="F:WaveletStudio.SignalExtension.ExtensionMode.SymmetricHalfPoint">
            <summary>
            Symmetric-padding (half-point): boundary value symmetric replication
            </summary>
        </member>
        <member name="F:WaveletStudio.SignalExtension.ExtensionMode.SymmetricWholePoint">
            <summary>
            Symmetric-padding (whole-point): boundary value symmetric replication
            </summary>
        </member>
        <member name="F:WaveletStudio.SignalExtension.ExtensionMode.AntisymmetricHalfPoint">
            <summary>
            Antisymmetric-padding (half-point): boundary value antisymmetric replication
            </summary>
        </member>
        <member name="F:WaveletStudio.SignalExtension.ExtensionMode.AntisymmetricWholePoint">
            <summary>
            Antisymmetric-padding (whole-point): boundary value antisymmetric replication
            </summary>
        </member>
        <member name="F:WaveletStudio.SignalExtension.ExtensionMode.PeriodicPadding">
            <summary>
            Periodized extension
            </summary>
        </member>
        <member name="F:WaveletStudio.SignalExtension.ExtensionMode.ZeroPadding">
            <summary>
            Zero extension
            </summary>
        </member>
        <member name="F:WaveletStudio.SignalExtension.ExtensionMode.SmoothPadding0">
            <summary>
            Smooth extension of order 0 (Continuous)
            </summary>
        </member>
        <member name="F:WaveletStudio.SignalExtension.ExtensionMode.SmoothPadding1">
            <summary>
            Smooth extension of order 1
            </summary>
        </member>
    </members>
</doc>
